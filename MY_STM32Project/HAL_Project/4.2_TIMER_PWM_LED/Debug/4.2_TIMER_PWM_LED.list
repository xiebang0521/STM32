
4.2_TIMER_PWM_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cd0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  08002eb4  08002eb4  00012eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034d8  080034d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080034d8  080034d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034d8  080034d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034d8  080034d8  000134d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034dc  080034dc  000134dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  080034ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  080034ec  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ae65  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cc7  00000000  00000000  0002aedd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  0002cba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e0  00000000  00000000  0002d850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019195  00000000  00000000  0002e230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f768  00000000  00000000  000473c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094cf6  00000000  00000000  00056b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034a0  00000000  00000000  000eb824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000eecc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002e9c 	.word	0x08002e9c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08002e9c 	.word	0x08002e9c

08000224 <OLED_WriteCommand>:
  * @brief  OLED写命令
  * @param  Command 要写入的命令
  * @retval 无
  */
void OLED_WriteCommand(uint8_t Command)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af02      	add	r7, sp, #8
 800022a:	4603      	mov	r3, r0
 800022c:	71fb      	strb	r3, [r7, #7]
	uint8_t I2C_Send_Buf[2] = {0x00, Command};
 800022e:	2300      	movs	r3, #0
 8000230:	733b      	strb	r3, [r7, #12]
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,0x78,I2C_Send_Buf,2,100);
 8000236:	f107 020c 	add.w	r2, r7, #12
 800023a:	2364      	movs	r3, #100	; 0x64
 800023c:	9300      	str	r3, [sp, #0]
 800023e:	2302      	movs	r3, #2
 8000240:	2178      	movs	r1, #120	; 0x78
 8000242:	4803      	ldr	r0, [pc, #12]	; (8000250 <OLED_WriteCommand+0x2c>)
 8000244:	f001 f866 	bl	8001314 <HAL_I2C_Master_Transmit>
//	OLED_I2C_Start();
//	OLED_I2C_SendByte(0x78);		//从机地址
//	OLED_I2C_SendByte(0x00);		//写命令
//	OLED_I2C_SendByte(Command);
//	OLED_I2C_Stop();
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000028 	.word	0x20000028

08000254 <OLED_WriteData>:
  * @brief  OLED写数据
  * @param  Data 要写入的数据
  * @retval 无
  */
void OLED_WriteData(uint8_t Data)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b086      	sub	sp, #24
 8000258:	af02      	add	r7, sp, #8
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
	uint8_t I2C_Send_Buf[2] = {0x40, Data};
 800025e:	2340      	movs	r3, #64	; 0x40
 8000260:	733b      	strb	r3, [r7, #12]
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,0x78,I2C_Send_Buf,2,100);
 8000266:	f107 020c 	add.w	r2, r7, #12
 800026a:	2364      	movs	r3, #100	; 0x64
 800026c:	9300      	str	r3, [sp, #0]
 800026e:	2302      	movs	r3, #2
 8000270:	2178      	movs	r1, #120	; 0x78
 8000272:	4803      	ldr	r0, [pc, #12]	; (8000280 <OLED_WriteData+0x2c>)
 8000274:	f001 f84e 	bl	8001314 <HAL_I2C_Master_Transmit>
//	OLED_I2C_Start();
//	OLED_I2C_SendByte(0x78);		//从机地址
//	OLED_I2C_SendByte(0x40);		//写数据
//	OLED_I2C_SendByte(Data);
//	OLED_I2C_Stop();
}
 8000278:	bf00      	nop
 800027a:	3710      	adds	r7, #16
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20000028 	.word	0x20000028

08000284 <OLED_SetCursor>:
  * @param  Y 以左上角为原点，向下方向的坐标，范围：0~7
  * @param  X 以左上角为原点，向右方向的坐标，范围：0~127
  * @retval 无
  */
void OLED_SetCursor(uint8_t Y, uint8_t X)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	460a      	mov	r2, r1
 800028e:	71fb      	strb	r3, [r7, #7]
 8000290:	4613      	mov	r3, r2
 8000292:	71bb      	strb	r3, [r7, #6]
	OLED_WriteCommand(0xB0 | Y);					//设置Y位置
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800029a:	b2db      	uxtb	r3, r3
 800029c:	4618      	mov	r0, r3
 800029e:	f7ff ffc1 	bl	8000224 <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置高4位
 80002a2:	79bb      	ldrb	r3, [r7, #6]
 80002a4:	091b      	lsrs	r3, r3, #4
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	f043 0310 	orr.w	r3, r3, #16
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	4618      	mov	r0, r3
 80002b0:	f7ff ffb8 	bl	8000224 <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置低4位
 80002b4:	79bb      	ldrb	r3, [r7, #6]
 80002b6:	f003 030f 	and.w	r3, r3, #15
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	4618      	mov	r0, r3
 80002be:	f7ff ffb1 	bl	8000224 <OLED_WriteCommand>
}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}

080002ca <OLED_Clear>:
  * @brief  OLED清屏
  * @param  无
  * @retval 无
  */
void OLED_Clear(void)
{  
 80002ca:	b580      	push	{r7, lr}
 80002cc:	b082      	sub	sp, #8
 80002ce:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 80002d0:	2300      	movs	r3, #0
 80002d2:	71bb      	strb	r3, [r7, #6]
 80002d4:	e014      	b.n	8000300 <OLED_Clear+0x36>
	{
		OLED_SetCursor(j, 0);
 80002d6:	79bb      	ldrb	r3, [r7, #6]
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f7ff ffd2 	bl	8000284 <OLED_SetCursor>
		for(i = 0; i < 128; i++)
 80002e0:	2300      	movs	r3, #0
 80002e2:	71fb      	strb	r3, [r7, #7]
 80002e4:	e005      	b.n	80002f2 <OLED_Clear+0x28>
		{
			OLED_WriteData(0x00);
 80002e6:	2000      	movs	r0, #0
 80002e8:	f7ff ffb4 	bl	8000254 <OLED_WriteData>
		for(i = 0; i < 128; i++)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	3301      	adds	r3, #1
 80002f0:	71fb      	strb	r3, [r7, #7]
 80002f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	daf5      	bge.n	80002e6 <OLED_Clear+0x1c>
	for (j = 0; j < 8; j++)
 80002fa:	79bb      	ldrb	r3, [r7, #6]
 80002fc:	3301      	adds	r3, #1
 80002fe:	71bb      	strb	r3, [r7, #6]
 8000300:	79bb      	ldrb	r3, [r7, #6]
 8000302:	2b07      	cmp	r3, #7
 8000304:	d9e7      	bls.n	80002d6 <OLED_Clear+0xc>
		}
	}
}
 8000306:	bf00      	nop
 8000308:	bf00      	nop
 800030a:	3708      	adds	r7, #8
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <OLED_ShowChar>:
  * @param  Column 列位置，范围：1~16
  * @param  Char 要显示的一个字符，范围：ASCII可见字符
  * @retval 无
  */
void OLED_ShowChar(uint8_t Line, uint8_t Column, char Char)
{      	
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
 800031a:	460b      	mov	r3, r1
 800031c:	71bb      	strb	r3, [r7, #6]
 800031e:	4613      	mov	r3, r2
 8000320:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8);		//设置光标位置在上半部分
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	3b01      	subs	r3, #1
 8000326:	b2db      	uxtb	r3, r3
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	b2da      	uxtb	r2, r3
 800032c:	79bb      	ldrb	r3, [r7, #6]
 800032e:	3b01      	subs	r3, #1
 8000330:	b2db      	uxtb	r3, r3
 8000332:	00db      	lsls	r3, r3, #3
 8000334:	b2db      	uxtb	r3, r3
 8000336:	4619      	mov	r1, r3
 8000338:	4610      	mov	r0, r2
 800033a:	f7ff ffa3 	bl	8000284 <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 800033e:	2300      	movs	r3, #0
 8000340:	73fb      	strb	r3, [r7, #15]
 8000342:	e00e      	b.n	8000362 <OLED_ShowChar+0x52>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i]);			//显示上半部分内容
 8000344:	797b      	ldrb	r3, [r7, #5]
 8000346:	f1a3 0220 	sub.w	r2, r3, #32
 800034a:	7bfb      	ldrb	r3, [r7, #15]
 800034c:	491c      	ldr	r1, [pc, #112]	; (80003c0 <OLED_ShowChar+0xb0>)
 800034e:	0112      	lsls	r2, r2, #4
 8000350:	440a      	add	r2, r1
 8000352:	4413      	add	r3, r2
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff ff7c 	bl	8000254 <OLED_WriteData>
	for (i = 0; i < 8; i++)
 800035c:	7bfb      	ldrb	r3, [r7, #15]
 800035e:	3301      	adds	r3, #1
 8000360:	73fb      	strb	r3, [r7, #15]
 8000362:	7bfb      	ldrb	r3, [r7, #15]
 8000364:	2b07      	cmp	r3, #7
 8000366:	d9ed      	bls.n	8000344 <OLED_ShowChar+0x34>
	}
	OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8);	//设置光标位置在下半部分
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	3b01      	subs	r3, #1
 800036c:	b2db      	uxtb	r3, r3
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	b2db      	uxtb	r3, r3
 8000372:	3301      	adds	r3, #1
 8000374:	b2da      	uxtb	r2, r3
 8000376:	79bb      	ldrb	r3, [r7, #6]
 8000378:	3b01      	subs	r3, #1
 800037a:	b2db      	uxtb	r3, r3
 800037c:	00db      	lsls	r3, r3, #3
 800037e:	b2db      	uxtb	r3, r3
 8000380:	4619      	mov	r1, r3
 8000382:	4610      	mov	r0, r2
 8000384:	f7ff ff7e 	bl	8000284 <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 8000388:	2300      	movs	r3, #0
 800038a:	73fb      	strb	r3, [r7, #15]
 800038c:	e00f      	b.n	80003ae <OLED_ShowChar+0x9e>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i + 8]);		//显示下半部分内容
 800038e:	797b      	ldrb	r3, [r7, #5]
 8000390:	f1a3 0220 	sub.w	r2, r3, #32
 8000394:	7bfb      	ldrb	r3, [r7, #15]
 8000396:	3308      	adds	r3, #8
 8000398:	4909      	ldr	r1, [pc, #36]	; (80003c0 <OLED_ShowChar+0xb0>)
 800039a:	0112      	lsls	r2, r2, #4
 800039c:	440a      	add	r2, r1
 800039e:	4413      	add	r3, r2
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff ff56 	bl	8000254 <OLED_WriteData>
	for (i = 0; i < 8; i++)
 80003a8:	7bfb      	ldrb	r3, [r7, #15]
 80003aa:	3301      	adds	r3, #1
 80003ac:	73fb      	strb	r3, [r7, #15]
 80003ae:	7bfb      	ldrb	r3, [r7, #15]
 80003b0:	2b07      	cmp	r3, #7
 80003b2:	d9ec      	bls.n	800038e <OLED_ShowChar+0x7e>
	}
}
 80003b4:	bf00      	nop
 80003b6:	bf00      	nop
 80003b8:	3710      	adds	r7, #16
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	08002ebc 	.word	0x08002ebc

080003c4 <OLED_ShowString>:
  * @param  Column 起始列位置，范围：1~16
  * @param  String 要显示的字符串，范围：ASCII可见字符
  * @retval 无
  */
void OLED_ShowString(uint8_t Line, uint8_t Column, char *String)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	603a      	str	r2, [r7, #0]
 80003ce:	71fb      	strb	r3, [r7, #7]
 80003d0:	460b      	mov	r3, r1
 80003d2:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	for (i = 0; String[i] != '\0'; i++)
 80003d4:	2300      	movs	r3, #0
 80003d6:	73fb      	strb	r3, [r7, #15]
 80003d8:	e00e      	b.n	80003f8 <OLED_ShowString+0x34>
	{
		OLED_ShowChar(Line, Column + i, String[i]);
 80003da:	79ba      	ldrb	r2, [r7, #6]
 80003dc:	7bfb      	ldrb	r3, [r7, #15]
 80003de:	4413      	add	r3, r2
 80003e0:	b2d9      	uxtb	r1, r3
 80003e2:	7bfb      	ldrb	r3, [r7, #15]
 80003e4:	683a      	ldr	r2, [r7, #0]
 80003e6:	4413      	add	r3, r2
 80003e8:	781a      	ldrb	r2, [r3, #0]
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff ff8f 	bl	8000310 <OLED_ShowChar>
	for (i = 0; String[i] != '\0'; i++)
 80003f2:	7bfb      	ldrb	r3, [r7, #15]
 80003f4:	3301      	adds	r3, #1
 80003f6:	73fb      	strb	r3, [r7, #15]
 80003f8:	7bfb      	ldrb	r3, [r7, #15]
 80003fa:	683a      	ldr	r2, [r7, #0]
 80003fc:	4413      	add	r3, r2
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d1ea      	bne.n	80003da <OLED_ShowString+0x16>
	}
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop
 8000408:	3710      	adds	r7, #16
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}

0800040e <OLED_Pow>:
/**
  * @brief  OLED次方函数
  * @retval 返回值等于X的Y次方
  */
uint32_t OLED_Pow(uint32_t X, uint32_t Y)
{
 800040e:	b480      	push	{r7}
 8000410:	b085      	sub	sp, #20
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
 8000416:	6039      	str	r1, [r7, #0]
	uint32_t Result = 1;
 8000418:	2301      	movs	r3, #1
 800041a:	60fb      	str	r3, [r7, #12]
	while (Y--)
 800041c:	e004      	b.n	8000428 <OLED_Pow+0x1a>
	{
		Result *= X;
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	fb02 f303 	mul.w	r3, r2, r3
 8000426:	60fb      	str	r3, [r7, #12]
	while (Y--)
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	1e5a      	subs	r2, r3, #1
 800042c:	603a      	str	r2, [r7, #0]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d1f5      	bne.n	800041e <OLED_Pow+0x10>
	}
	return Result;
 8000432:	68fb      	ldr	r3, [r7, #12]
}
 8000434:	4618      	mov	r0, r3
 8000436:	3714      	adds	r7, #20
 8000438:	46bd      	mov	sp, r7
 800043a:	bc80      	pop	{r7}
 800043c:	4770      	bx	lr
	...

08000440 <OLED_ShowNum>:
  * @param  Number 要显示的数字，范围：0~4294967295
  * @param  Length 要显示数字的长度，范围：1~10
  * @retval 无
  */
void OLED_ShowNum(uint8_t Line, uint8_t Column, uint32_t Number, uint8_t Length)
{
 8000440:	b590      	push	{r4, r7, lr}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	603a      	str	r2, [r7, #0]
 8000448:	461a      	mov	r2, r3
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
 800044e:	460b      	mov	r3, r1
 8000450:	71bb      	strb	r3, [r7, #6]
 8000452:	4613      	mov	r3, r2
 8000454:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	for (i = 0; i < Length; i++)							
 8000456:	2300      	movs	r3, #0
 8000458:	73fb      	strb	r3, [r7, #15]
 800045a:	e023      	b.n	80004a4 <OLED_ShowNum+0x64>
	{
		OLED_ShowChar(Line, Column + i, Number / OLED_Pow(10, Length - i - 1) % 10 + '0');
 800045c:	79ba      	ldrb	r2, [r7, #6]
 800045e:	7bfb      	ldrb	r3, [r7, #15]
 8000460:	4413      	add	r3, r2
 8000462:	b2dc      	uxtb	r4, r3
 8000464:	797a      	ldrb	r2, [r7, #5]
 8000466:	7bfb      	ldrb	r3, [r7, #15]
 8000468:	1ad3      	subs	r3, r2, r3
 800046a:	3b01      	subs	r3, #1
 800046c:	4619      	mov	r1, r3
 800046e:	200a      	movs	r0, #10
 8000470:	f7ff ffcd 	bl	800040e <OLED_Pow>
 8000474:	4602      	mov	r2, r0
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	fbb3 f1f2 	udiv	r1, r3, r2
 800047c:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <OLED_ShowNum+0x78>)
 800047e:	fba3 2301 	umull	r2, r3, r3, r1
 8000482:	08da      	lsrs	r2, r3, #3
 8000484:	4613      	mov	r3, r2
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	4413      	add	r3, r2
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	1aca      	subs	r2, r1, r3
 800048e:	b2d3      	uxtb	r3, r2
 8000490:	3330      	adds	r3, #48	; 0x30
 8000492:	b2da      	uxtb	r2, r3
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	4621      	mov	r1, r4
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ff39 	bl	8000310 <OLED_ShowChar>
	for (i = 0; i < Length; i++)							
 800049e:	7bfb      	ldrb	r3, [r7, #15]
 80004a0:	3301      	adds	r3, #1
 80004a2:	73fb      	strb	r3, [r7, #15]
 80004a4:	7bfa      	ldrb	r2, [r7, #15]
 80004a6:	797b      	ldrb	r3, [r7, #5]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d3d7      	bcc.n	800045c <OLED_ShowNum+0x1c>
	}
}
 80004ac:	bf00      	nop
 80004ae:	bf00      	nop
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd90      	pop	{r4, r7, pc}
 80004b6:	bf00      	nop
 80004b8:	cccccccd 	.word	0xcccccccd

080004bc <OLED_Init>:
  * @brief  OLED初始化
  * @param  无
  * @retval 无
  */
void OLED_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
	uint32_t i, j;
	
	for (i = 0; i < 1000; i++)			//上电延时
 80004c2:	2300      	movs	r3, #0
 80004c4:	607b      	str	r3, [r7, #4]
 80004c6:	e00c      	b.n	80004e2 <OLED_Init+0x26>
	{
		for (j = 0; j < 1000; j++);
 80004c8:	2300      	movs	r3, #0
 80004ca:	603b      	str	r3, [r7, #0]
 80004cc:	e002      	b.n	80004d4 <OLED_Init+0x18>
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	3301      	adds	r3, #1
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004da:	d3f8      	bcc.n	80004ce <OLED_Init+0x12>
	for (i = 0; i < 1000; i++)			//上电延时
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	3301      	adds	r3, #1
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004e8:	d3ee      	bcc.n	80004c8 <OLED_Init+0xc>
	}

	OLED_WriteCommand(0xAE);	//关闭显示
 80004ea:	20ae      	movs	r0, #174	; 0xae
 80004ec:	f7ff fe9a 	bl	8000224 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 80004f0:	20d5      	movs	r0, #213	; 0xd5
 80004f2:	f7ff fe97 	bl	8000224 <OLED_WriteCommand>
	OLED_WriteCommand(0x80);
 80004f6:	2080      	movs	r0, #128	; 0x80
 80004f8:	f7ff fe94 	bl	8000224 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA8);	//设置多路复用率
 80004fc:	20a8      	movs	r0, #168	; 0xa8
 80004fe:	f7ff fe91 	bl	8000224 <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 8000502:	203f      	movs	r0, #63	; 0x3f
 8000504:	f7ff fe8e 	bl	8000224 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD3);	//设置显示偏移
 8000508:	20d3      	movs	r0, #211	; 0xd3
 800050a:	f7ff fe8b 	bl	8000224 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 800050e:	2000      	movs	r0, #0
 8000510:	f7ff fe88 	bl	8000224 <OLED_WriteCommand>
	
	OLED_WriteCommand(0x40);	//设置显示开始行
 8000514:	2040      	movs	r0, #64	; 0x40
 8000516:	f7ff fe85 	bl	8000224 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常 0xA0左右反置
 800051a:	20a1      	movs	r0, #161	; 0xa1
 800051c:	f7ff fe82 	bl	8000224 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常 0xC0上下反置
 8000520:	20c8      	movs	r0, #200	; 0xc8
 8000522:	f7ff fe7f 	bl	8000224 <OLED_WriteCommand>

	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 8000526:	20da      	movs	r0, #218	; 0xda
 8000528:	f7ff fe7c 	bl	8000224 <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 800052c:	2012      	movs	r0, #18
 800052e:	f7ff fe79 	bl	8000224 <OLED_WriteCommand>
	
	OLED_WriteCommand(0x81);	//设置对比度控制
 8000532:	2081      	movs	r0, #129	; 0x81
 8000534:	f7ff fe76 	bl	8000224 <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);
 8000538:	20cf      	movs	r0, #207	; 0xcf
 800053a:	f7ff fe73 	bl	8000224 <OLED_WriteCommand>

	OLED_WriteCommand(0xD9);	//设置预充电周期
 800053e:	20d9      	movs	r0, #217	; 0xd9
 8000540:	f7ff fe70 	bl	8000224 <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 8000544:	20f1      	movs	r0, #241	; 0xf1
 8000546:	f7ff fe6d 	bl	8000224 <OLED_WriteCommand>

	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 800054a:	20db      	movs	r0, #219	; 0xdb
 800054c:	f7ff fe6a 	bl	8000224 <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 8000550:	2030      	movs	r0, #48	; 0x30
 8000552:	f7ff fe67 	bl	8000224 <OLED_WriteCommand>

	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 8000556:	20a4      	movs	r0, #164	; 0xa4
 8000558:	f7ff fe64 	bl	8000224 <OLED_WriteCommand>

	OLED_WriteCommand(0xA6);	//设置正常/倒转显示
 800055c:	20a6      	movs	r0, #166	; 0xa6
 800055e:	f7ff fe61 	bl	8000224 <OLED_WriteCommand>

	OLED_WriteCommand(0x8D);	//设置充电泵
 8000562:	208d      	movs	r0, #141	; 0x8d
 8000564:	f7ff fe5e 	bl	8000224 <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8000568:	2014      	movs	r0, #20
 800056a:	f7ff fe5b 	bl	8000224 <OLED_WriteCommand>

	OLED_WriteCommand(0xAF);	//开启显示
 800056e:	20af      	movs	r0, #175	; 0xaf
 8000570:	f7ff fe58 	bl	8000224 <OLED_WriteCommand>
		
	OLED_Clear();				//OLED清屏
 8000574:	f7ff fea9 	bl	80002ca <OLED_Clear>
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_GPIO_Init+0x40>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <MX_GPIO_Init+0x40>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	6193      	str	r3, [r2, #24]
 8000592:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <MX_GPIO_Init+0x40>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059e:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <MX_GPIO_Init+0x40>)
 80005a0:	699b      	ldr	r3, [r3, #24]
 80005a2:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <MX_GPIO_Init+0x40>)
 80005a4:	f043 0308 	orr.w	r3, r3, #8
 80005a8:	6193      	str	r3, [r2, #24]
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <MX_GPIO_Init+0x40>)
 80005ac:	699b      	ldr	r3, [r3, #24]
 80005ae:	f003 0308 	and.w	r3, r3, #8
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]

}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	40021000 	.word	0x40021000

080005c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <MX_I2C1_Init+0x50>)
 80005ca:	4a13      	ldr	r2, [pc, #76]	; (8000618 <MX_I2C1_Init+0x54>)
 80005cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <MX_I2C1_Init+0x50>)
 80005d0:	4a12      	ldr	r2, [pc, #72]	; (800061c <MX_I2C1_Init+0x58>)
 80005d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <MX_I2C1_Init+0x50>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <MX_I2C1_Init+0x50>)
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MX_I2C1_Init+0x50>)
 80005e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <MX_I2C1_Init+0x50>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_I2C1_Init+0x50>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <MX_I2C1_Init+0x50>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MX_I2C1_Init+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <MX_I2C1_Init+0x50>)
 8000602:	f000 fd43 	bl	800108c <HAL_I2C_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800060c:	f000 f8df 	bl	80007ce <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000028 	.word	0x20000028
 8000618:	40005400 	.word	0x40005400
 800061c:	000186a0 	.word	0x000186a0

08000620 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a15      	ldr	r2, [pc, #84]	; (8000690 <HAL_I2C_MspInit+0x70>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d123      	bne.n	8000688 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <HAL_I2C_MspInit+0x74>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a13      	ldr	r2, [pc, #76]	; (8000694 <HAL_I2C_MspInit+0x74>)
 8000646:	f043 0308 	orr.w	r3, r3, #8
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <HAL_I2C_MspInit+0x74>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f003 0308 	and.w	r3, r3, #8
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000658:	23c0      	movs	r3, #192	; 0xc0
 800065a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800065c:	2312      	movs	r3, #18
 800065e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000660:	2303      	movs	r3, #3
 8000662:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	4619      	mov	r1, r3
 800066a:	480b      	ldr	r0, [pc, #44]	; (8000698 <HAL_I2C_MspInit+0x78>)
 800066c:	f000 fb7a 	bl	8000d64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <HAL_I2C_MspInit+0x74>)
 8000672:	69db      	ldr	r3, [r3, #28]
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <HAL_I2C_MspInit+0x74>)
 8000676:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800067a:	61d3      	str	r3, [r2, #28]
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <HAL_I2C_MspInit+0x74>)
 800067e:	69db      	ldr	r3, [r3, #28]
 8000680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000688:	bf00      	nop
 800068a:	3720      	adds	r7, #32
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40005400 	.word	0x40005400
 8000694:	40021000 	.word	0x40021000
 8000698:	40010c00 	.word	0x40010c00

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a0:	f000 f9f6 	bl	8000a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a4:	f000 f84e 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a8:	f7ff ff6a 	bl	8000580 <MX_GPIO_Init>
  MX_TIM2_Init();
 80006ac:	f000 f8f4 	bl	8000898 <MX_TIM2_Init>
  MX_I2C1_Init();
 80006b0:	f7ff ff88 	bl	80005c4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 80006b4:	f7ff ff02 	bl	80004bc <OLED_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80006b8:	2100      	movs	r1, #0
 80006ba:	481f      	ldr	r0, [pc, #124]	; (8000738 <main+0x9c>)
 80006bc:	f001 fe26 	bl	800230c <HAL_TIM_PWM_Start>
  OLED_ShowString(1, 1,"CNT:");
 80006c0:	4a1e      	ldr	r2, [pc, #120]	; (800073c <main+0xa0>)
 80006c2:	2101      	movs	r1, #1
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff fe7d 	bl	80003c4 <OLED_ShowString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(value < 100)
 80006ca:	e015      	b.n	80006f8 <main+0x5c>
	  {
		  value++;
 80006cc:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <main+0xa4>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	3301      	adds	r3, #1
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <main+0xa4>)
 80006d6:	801a      	strh	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, value);
 80006d8:	4b19      	ldr	r3, [pc, #100]	; (8000740 <main+0xa4>)
 80006da:	881a      	ldrh	r2, [r3, #0]
 80006dc:	4b16      	ldr	r3, [pc, #88]	; (8000738 <main+0x9c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	635a      	str	r2, [r3, #52]	; 0x34
		  OLED_ShowNum(1, 6, value, 5);
 80006e2:	4b17      	ldr	r3, [pc, #92]	; (8000740 <main+0xa4>)
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	461a      	mov	r2, r3
 80006e8:	2305      	movs	r3, #5
 80006ea:	2106      	movs	r1, #6
 80006ec:	2001      	movs	r0, #1
 80006ee:	f7ff fea7 	bl	8000440 <OLED_ShowNum>
		  HAL_Delay(1);
 80006f2:	2001      	movs	r0, #1
 80006f4:	f000 fa2e 	bl	8000b54 <HAL_Delay>
	  while(value < 100)
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <main+0xa4>)
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	2b63      	cmp	r3, #99	; 0x63
 80006fe:	d9e5      	bls.n	80006cc <main+0x30>
	  }

	  while(value)
 8000700:	e015      	b.n	800072e <main+0x92>
	  {
		  value--;
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <main+0xa4>)
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	3b01      	subs	r3, #1
 8000708:	b29a      	uxth	r2, r3
 800070a:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <main+0xa4>)
 800070c:	801a      	strh	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, value);
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <main+0xa4>)
 8000710:	881a      	ldrh	r2, [r3, #0]
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <main+0x9c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	635a      	str	r2, [r3, #52]	; 0x34
		  OLED_ShowNum(1, 6, value, 5);
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <main+0xa4>)
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	461a      	mov	r2, r3
 800071e:	2305      	movs	r3, #5
 8000720:	2106      	movs	r1, #6
 8000722:	2001      	movs	r0, #1
 8000724:	f7ff fe8c 	bl	8000440 <OLED_ShowNum>
		  HAL_Delay(1);
 8000728:	2001      	movs	r0, #1
 800072a:	f000 fa13 	bl	8000b54 <HAL_Delay>
	  while(value)
 800072e:	4b04      	ldr	r3, [pc, #16]	; (8000740 <main+0xa4>)
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1e5      	bne.n	8000702 <main+0x66>
	  while(value < 100)
 8000736:	e7df      	b.n	80006f8 <main+0x5c>
 8000738:	20000080 	.word	0x20000080
 800073c:	08002eb4 	.word	0x08002eb4
 8000740:	2000007c 	.word	0x2000007c

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b090      	sub	sp, #64	; 0x40
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0318 	add.w	r3, r7, #24
 800074e:	2228      	movs	r2, #40	; 0x28
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f002 fb76 	bl	8002e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000766:	2301      	movs	r3, #1
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800076a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800076e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000774:	2301      	movs	r3, #1
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000778:	2302      	movs	r3, #2
 800077a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000780:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000782:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000786:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 0318 	add.w	r3, r7, #24
 800078c:	4618      	mov	r0, r3
 800078e:	f001 f919 	bl	80019c4 <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000798:	f000 f819 	bl	80007ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a0:	2302      	movs	r3, #2
 80007a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2102      	movs	r1, #2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fb86 	bl	8001ec8 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007c2:	f000 f804 	bl	80007ce <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3740      	adds	r7, #64	; 0x40
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d2:	b672      	cpsid	i
}
 80007d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d6:	e7fe      	b.n	80007d6 <Error_Handler+0x8>

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <HAL_MspInit+0x5c>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	4a14      	ldr	r2, [pc, #80]	; (8000834 <HAL_MspInit+0x5c>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6193      	str	r3, [r2, #24]
 80007ea:	4b12      	ldr	r3, [pc, #72]	; (8000834 <HAL_MspInit+0x5c>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <HAL_MspInit+0x5c>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	4a0e      	ldr	r2, [pc, #56]	; (8000834 <HAL_MspInit+0x5c>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000800:	61d3      	str	r3, [r2, #28]
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <HAL_MspInit+0x5c>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <HAL_MspInit+0x60>)
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000822:	60fb      	str	r3, [r7, #12]
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <HAL_MspInit+0x60>)
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	40021000 	.word	0x40021000
 8000838:	40010000 	.word	0x40010000

0800083c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <NMI_Handler+0x4>

08000842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <HardFault_Handler+0x4>

08000848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <MemManage_Handler+0x4>

0800084e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <BusFault_Handler+0x4>

08000854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <UsageFault_Handler+0x4>

0800085a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr

08000866 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr

08000872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr

0800087e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000882:	f000 f94b 	bl	8000b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}

0800088a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
	...

08000898 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08e      	sub	sp, #56	; 0x38
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ac:	f107 0320 	add.w	r3, r7, #32
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
 80008c4:	615a      	str	r2, [r3, #20]
 80008c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008c8:	4b2c      	ldr	r3, [pc, #176]	; (800097c <MX_TIM2_Init+0xe4>)
 80008ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80008d0:	4b2a      	ldr	r3, [pc, #168]	; (800097c <MX_TIM2_Init+0xe4>)
 80008d2:	2247      	movs	r2, #71	; 0x47
 80008d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <MX_TIM2_Init+0xe4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80008dc:	4b27      	ldr	r3, [pc, #156]	; (800097c <MX_TIM2_Init+0xe4>)
 80008de:	2263      	movs	r2, #99	; 0x63
 80008e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e2:	4b26      	ldr	r3, [pc, #152]	; (800097c <MX_TIM2_Init+0xe4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008e8:	4b24      	ldr	r3, [pc, #144]	; (800097c <MX_TIM2_Init+0xe4>)
 80008ea:	2280      	movs	r2, #128	; 0x80
 80008ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008ee:	4823      	ldr	r0, [pc, #140]	; (800097c <MX_TIM2_Init+0xe4>)
 80008f0:	f001 fc64 	bl	80021bc <HAL_TIM_Base_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80008fa:	f7ff ff68 	bl	80007ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000904:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000908:	4619      	mov	r1, r3
 800090a:	481c      	ldr	r0, [pc, #112]	; (800097c <MX_TIM2_Init+0xe4>)
 800090c:	f001 fe7a 	bl	8002604 <HAL_TIM_ConfigClockSource>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000916:	f7ff ff5a 	bl	80007ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800091a:	4818      	ldr	r0, [pc, #96]	; (800097c <MX_TIM2_Init+0xe4>)
 800091c:	f001 fc9d 	bl	800225a <HAL_TIM_PWM_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000926:	f7ff ff52 	bl	80007ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000932:	f107 0320 	add.w	r3, r7, #32
 8000936:	4619      	mov	r1, r3
 8000938:	4810      	ldr	r0, [pc, #64]	; (800097c <MX_TIM2_Init+0xe4>)
 800093a:	f002 fa17 	bl	8002d6c <HAL_TIMEx_MasterConfigSynchronization>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000944:	f7ff ff43 	bl	80007ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000948:	2360      	movs	r3, #96	; 0x60
 800094a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 800094c:	2332      	movs	r3, #50	; 0x32
 800094e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2200      	movs	r2, #0
 800095c:	4619      	mov	r1, r3
 800095e:	4807      	ldr	r0, [pc, #28]	; (800097c <MX_TIM2_Init+0xe4>)
 8000960:	f001 fd8e 	bl	8002480 <HAL_TIM_PWM_ConfigChannel>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800096a:	f7ff ff30 	bl	80007ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800096e:	4803      	ldr	r0, [pc, #12]	; (800097c <MX_TIM2_Init+0xe4>)
 8000970:	f000 f822 	bl	80009b8 <HAL_TIM_MspPostInit>

}
 8000974:	bf00      	nop
 8000976:	3738      	adds	r7, #56	; 0x38
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000080 	.word	0x20000080

08000980 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000990:	d10b      	bne.n	80009aa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <HAL_TIM_Base_MspInit+0x34>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	4a07      	ldr	r2, [pc, #28]	; (80009b4 <HAL_TIM_Base_MspInit+0x34>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	61d3      	str	r3, [r2, #28]
 800099e:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <HAL_TIM_Base_MspInit+0x34>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80009aa:	bf00      	nop
 80009ac:	3714      	adds	r7, #20
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	40021000 	.word	0x40021000

080009b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009d6:	d12a      	bne.n	8000a2e <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <HAL_TIM_MspPostInit+0x80>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a16      	ldr	r2, [pc, #88]	; (8000a38 <HAL_TIM_MspPostInit+0x80>)
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <HAL_TIM_MspPostInit+0x80>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f003 0304 	and.w	r3, r3, #4
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2302      	movs	r3, #2
 80009fc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	4619      	mov	r1, r3
 8000a04:	480d      	ldr	r0, [pc, #52]	; (8000a3c <HAL_TIM_MspPostInit+0x84>)
 8000a06:	f000 f9ad 	bl	8000d64 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <HAL_TIM_MspPostInit+0x88>)
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	61fb      	str	r3, [r7, #28]
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a16:	61fb      	str	r3, [r7, #28]
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a1e:	61fb      	str	r3, [r7, #28]
 8000a20:	69fb      	ldr	r3, [r7, #28]
 8000a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a26:	61fb      	str	r3, [r7, #28]
 8000a28:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <HAL_TIM_MspPostInit+0x88>)
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a2e:	bf00      	nop
 8000a30:	3720      	adds	r7, #32
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40010800 	.word	0x40010800
 8000a40:	40010000 	.word	0x40010000

08000a44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a44:	f7ff ff21 	bl	800088a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a48:	480b      	ldr	r0, [pc, #44]	; (8000a78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a4a:	490c      	ldr	r1, [pc, #48]	; (8000a7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a4c:	4a0c      	ldr	r2, [pc, #48]	; (8000a80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a09      	ldr	r2, [pc, #36]	; (8000a84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a60:	4c09      	ldr	r4, [pc, #36]	; (8000a88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a6e:	f002 f9f1 	bl	8002e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a72:	f7ff fe13 	bl	800069c <main>
  bx lr
 8000a76:	4770      	bx	lr
  ldr r0, =_sdata
 8000a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a80:	080034e0 	.word	0x080034e0
  ldr r2, =_sbss
 8000a84:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a88:	200000cc 	.word	0x200000cc

08000a8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC1_2_IRQHandler>
	...

08000a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <HAL_Init+0x28>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <HAL_Init+0x28>)
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f92b 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	200f      	movs	r0, #15
 8000aa8:	f000 f808 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff fe94 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40022000 	.word	0x40022000

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x54>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_InitTick+0x58>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f935 	bl	8000d4a <HAL_SYSTICK_Config>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00e      	b.n	8000b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	d80a      	bhi.n	8000b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	f000 f90b 	bl	8000d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000afc:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <HAL_InitTick+0x5c>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000004 	.word	0x20000004

08000b1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <HAL_IncTick+0x1c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <HAL_IncTick+0x20>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a03      	ldr	r2, [pc, #12]	; (8000b3c <HAL_IncTick+0x20>)
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	200000c8 	.word	0x200000c8

08000b40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b02      	ldr	r3, [pc, #8]	; (8000b50 <HAL_GetTick+0x10>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	200000c8 	.word	0x200000c8

08000b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b5c:	f7ff fff0 	bl	8000b40 <HAL_GetTick>
 8000b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b6c:	d005      	beq.n	8000b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <HAL_Delay+0x44>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	461a      	mov	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4413      	add	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b7a:	bf00      	nop
 8000b7c:	f7ff ffe0 	bl	8000b40 <HAL_GetTick>
 8000b80:	4602      	mov	r2, r0
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d8f7      	bhi.n	8000b7c <HAL_Delay+0x28>
  {
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000008 	.word	0x20000008

08000b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bce:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	60d3      	str	r3, [r2, #12]
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <__NVIC_GetPriorityGrouping+0x18>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	f003 0307 	and.w	r3, r3, #7
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	; (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	; (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	; 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f7ff ff90 	bl	8000c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff49 	bl	8000b9c <__NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d24:	f7ff ff5e 	bl	8000be4 <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff90 	bl	8000c54 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff5f 	bl	8000c00 <__NVIC_SetPriority>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ffb0 	bl	8000cb8 <SysTick_Config>
 8000d58:	4603      	mov	r3, r0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b08b      	sub	sp, #44	; 0x2c
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d72:	2300      	movs	r3, #0
 8000d74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d76:	e179      	b.n	800106c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	69fa      	ldr	r2, [r7, #28]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	f040 8168 	bne.w	8001066 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	4a96      	ldr	r2, [pc, #600]	; (8000ff4 <HAL_GPIO_Init+0x290>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d05e      	beq.n	8000e5e <HAL_GPIO_Init+0xfa>
 8000da0:	4a94      	ldr	r2, [pc, #592]	; (8000ff4 <HAL_GPIO_Init+0x290>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d875      	bhi.n	8000e92 <HAL_GPIO_Init+0x12e>
 8000da6:	4a94      	ldr	r2, [pc, #592]	; (8000ff8 <HAL_GPIO_Init+0x294>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d058      	beq.n	8000e5e <HAL_GPIO_Init+0xfa>
 8000dac:	4a92      	ldr	r2, [pc, #584]	; (8000ff8 <HAL_GPIO_Init+0x294>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d86f      	bhi.n	8000e92 <HAL_GPIO_Init+0x12e>
 8000db2:	4a92      	ldr	r2, [pc, #584]	; (8000ffc <HAL_GPIO_Init+0x298>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d052      	beq.n	8000e5e <HAL_GPIO_Init+0xfa>
 8000db8:	4a90      	ldr	r2, [pc, #576]	; (8000ffc <HAL_GPIO_Init+0x298>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d869      	bhi.n	8000e92 <HAL_GPIO_Init+0x12e>
 8000dbe:	4a90      	ldr	r2, [pc, #576]	; (8001000 <HAL_GPIO_Init+0x29c>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d04c      	beq.n	8000e5e <HAL_GPIO_Init+0xfa>
 8000dc4:	4a8e      	ldr	r2, [pc, #568]	; (8001000 <HAL_GPIO_Init+0x29c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d863      	bhi.n	8000e92 <HAL_GPIO_Init+0x12e>
 8000dca:	4a8e      	ldr	r2, [pc, #568]	; (8001004 <HAL_GPIO_Init+0x2a0>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d046      	beq.n	8000e5e <HAL_GPIO_Init+0xfa>
 8000dd0:	4a8c      	ldr	r2, [pc, #560]	; (8001004 <HAL_GPIO_Init+0x2a0>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d85d      	bhi.n	8000e92 <HAL_GPIO_Init+0x12e>
 8000dd6:	2b12      	cmp	r3, #18
 8000dd8:	d82a      	bhi.n	8000e30 <HAL_GPIO_Init+0xcc>
 8000dda:	2b12      	cmp	r3, #18
 8000ddc:	d859      	bhi.n	8000e92 <HAL_GPIO_Init+0x12e>
 8000dde:	a201      	add	r2, pc, #4	; (adr r2, 8000de4 <HAL_GPIO_Init+0x80>)
 8000de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de4:	08000e5f 	.word	0x08000e5f
 8000de8:	08000e39 	.word	0x08000e39
 8000dec:	08000e4b 	.word	0x08000e4b
 8000df0:	08000e8d 	.word	0x08000e8d
 8000df4:	08000e93 	.word	0x08000e93
 8000df8:	08000e93 	.word	0x08000e93
 8000dfc:	08000e93 	.word	0x08000e93
 8000e00:	08000e93 	.word	0x08000e93
 8000e04:	08000e93 	.word	0x08000e93
 8000e08:	08000e93 	.word	0x08000e93
 8000e0c:	08000e93 	.word	0x08000e93
 8000e10:	08000e93 	.word	0x08000e93
 8000e14:	08000e93 	.word	0x08000e93
 8000e18:	08000e93 	.word	0x08000e93
 8000e1c:	08000e93 	.word	0x08000e93
 8000e20:	08000e93 	.word	0x08000e93
 8000e24:	08000e93 	.word	0x08000e93
 8000e28:	08000e41 	.word	0x08000e41
 8000e2c:	08000e55 	.word	0x08000e55
 8000e30:	4a75      	ldr	r2, [pc, #468]	; (8001008 <HAL_GPIO_Init+0x2a4>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d013      	beq.n	8000e5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e36:	e02c      	b.n	8000e92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	623b      	str	r3, [r7, #32]
          break;
 8000e3e:	e029      	b.n	8000e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	3304      	adds	r3, #4
 8000e46:	623b      	str	r3, [r7, #32]
          break;
 8000e48:	e024      	b.n	8000e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	3308      	adds	r3, #8
 8000e50:	623b      	str	r3, [r7, #32]
          break;
 8000e52:	e01f      	b.n	8000e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	330c      	adds	r3, #12
 8000e5a:	623b      	str	r3, [r7, #32]
          break;
 8000e5c:	e01a      	b.n	8000e94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d102      	bne.n	8000e6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e66:	2304      	movs	r3, #4
 8000e68:	623b      	str	r3, [r7, #32]
          break;
 8000e6a:	e013      	b.n	8000e94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d105      	bne.n	8000e80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e74:	2308      	movs	r3, #8
 8000e76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	69fa      	ldr	r2, [r7, #28]
 8000e7c:	611a      	str	r2, [r3, #16]
          break;
 8000e7e:	e009      	b.n	8000e94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e80:	2308      	movs	r3, #8
 8000e82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	69fa      	ldr	r2, [r7, #28]
 8000e88:	615a      	str	r2, [r3, #20]
          break;
 8000e8a:	e003      	b.n	8000e94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
          break;
 8000e90:	e000      	b.n	8000e94 <HAL_GPIO_Init+0x130>
          break;
 8000e92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	2bff      	cmp	r3, #255	; 0xff
 8000e98:	d801      	bhi.n	8000e9e <HAL_GPIO_Init+0x13a>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	e001      	b.n	8000ea2 <HAL_GPIO_Init+0x13e>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	2bff      	cmp	r3, #255	; 0xff
 8000ea8:	d802      	bhi.n	8000eb0 <HAL_GPIO_Init+0x14c>
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	e002      	b.n	8000eb6 <HAL_GPIO_Init+0x152>
 8000eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb2:	3b08      	subs	r3, #8
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	210f      	movs	r1, #15
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	6a39      	ldr	r1, [r7, #32]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f000 80c1 	beq.w	8001066 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ee4:	4b49      	ldr	r3, [pc, #292]	; (800100c <HAL_GPIO_Init+0x2a8>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a48      	ldr	r2, [pc, #288]	; (800100c <HAL_GPIO_Init+0x2a8>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b46      	ldr	r3, [pc, #280]	; (800100c <HAL_GPIO_Init+0x2a8>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000efc:	4a44      	ldr	r2, [pc, #272]	; (8001010 <HAL_GPIO_Init+0x2ac>)
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	089b      	lsrs	r3, r3, #2
 8000f02:	3302      	adds	r3, #2
 8000f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	220f      	movs	r2, #15
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a3c      	ldr	r2, [pc, #240]	; (8001014 <HAL_GPIO_Init+0x2b0>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d01f      	beq.n	8000f68 <HAL_GPIO_Init+0x204>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a3b      	ldr	r2, [pc, #236]	; (8001018 <HAL_GPIO_Init+0x2b4>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d019      	beq.n	8000f64 <HAL_GPIO_Init+0x200>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a3a      	ldr	r2, [pc, #232]	; (800101c <HAL_GPIO_Init+0x2b8>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d013      	beq.n	8000f60 <HAL_GPIO_Init+0x1fc>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a39      	ldr	r2, [pc, #228]	; (8001020 <HAL_GPIO_Init+0x2bc>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d00d      	beq.n	8000f5c <HAL_GPIO_Init+0x1f8>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a38      	ldr	r2, [pc, #224]	; (8001024 <HAL_GPIO_Init+0x2c0>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d007      	beq.n	8000f58 <HAL_GPIO_Init+0x1f4>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a37      	ldr	r2, [pc, #220]	; (8001028 <HAL_GPIO_Init+0x2c4>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d101      	bne.n	8000f54 <HAL_GPIO_Init+0x1f0>
 8000f50:	2305      	movs	r3, #5
 8000f52:	e00a      	b.n	8000f6a <HAL_GPIO_Init+0x206>
 8000f54:	2306      	movs	r3, #6
 8000f56:	e008      	b.n	8000f6a <HAL_GPIO_Init+0x206>
 8000f58:	2304      	movs	r3, #4
 8000f5a:	e006      	b.n	8000f6a <HAL_GPIO_Init+0x206>
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e004      	b.n	8000f6a <HAL_GPIO_Init+0x206>
 8000f60:	2302      	movs	r3, #2
 8000f62:	e002      	b.n	8000f6a <HAL_GPIO_Init+0x206>
 8000f64:	2301      	movs	r3, #1
 8000f66:	e000      	b.n	8000f6a <HAL_GPIO_Init+0x206>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f6c:	f002 0203 	and.w	r2, r2, #3
 8000f70:	0092      	lsls	r2, r2, #2
 8000f72:	4093      	lsls	r3, r2
 8000f74:	68fa      	ldr	r2, [r7, #12]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f7a:	4925      	ldr	r1, [pc, #148]	; (8001010 <HAL_GPIO_Init+0x2ac>)
 8000f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	3302      	adds	r3, #2
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d006      	beq.n	8000fa2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f94:	4b25      	ldr	r3, [pc, #148]	; (800102c <HAL_GPIO_Init+0x2c8>)
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	4924      	ldr	r1, [pc, #144]	; (800102c <HAL_GPIO_Init+0x2c8>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	608b      	str	r3, [r1, #8]
 8000fa0:	e006      	b.n	8000fb0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fa2:	4b22      	ldr	r3, [pc, #136]	; (800102c <HAL_GPIO_Init+0x2c8>)
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	4920      	ldr	r1, [pc, #128]	; (800102c <HAL_GPIO_Init+0x2c8>)
 8000fac:	4013      	ands	r3, r2
 8000fae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d006      	beq.n	8000fca <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	; (800102c <HAL_GPIO_Init+0x2c8>)
 8000fbe:	68da      	ldr	r2, [r3, #12]
 8000fc0:	491a      	ldr	r1, [pc, #104]	; (800102c <HAL_GPIO_Init+0x2c8>)
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	60cb      	str	r3, [r1, #12]
 8000fc8:	e006      	b.n	8000fd8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <HAL_GPIO_Init+0x2c8>)
 8000fcc:	68da      	ldr	r2, [r3, #12]
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	4916      	ldr	r1, [pc, #88]	; (800102c <HAL_GPIO_Init+0x2c8>)
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d025      	beq.n	8001030 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <HAL_GPIO_Init+0x2c8>)
 8000fe6:	685a      	ldr	r2, [r3, #4]
 8000fe8:	4910      	ldr	r1, [pc, #64]	; (800102c <HAL_GPIO_Init+0x2c8>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	604b      	str	r3, [r1, #4]
 8000ff0:	e025      	b.n	800103e <HAL_GPIO_Init+0x2da>
 8000ff2:	bf00      	nop
 8000ff4:	10320000 	.word	0x10320000
 8000ff8:	10310000 	.word	0x10310000
 8000ffc:	10220000 	.word	0x10220000
 8001000:	10210000 	.word	0x10210000
 8001004:	10120000 	.word	0x10120000
 8001008:	10110000 	.word	0x10110000
 800100c:	40021000 	.word	0x40021000
 8001010:	40010000 	.word	0x40010000
 8001014:	40010800 	.word	0x40010800
 8001018:	40010c00 	.word	0x40010c00
 800101c:	40011000 	.word	0x40011000
 8001020:	40011400 	.word	0x40011400
 8001024:	40011800 	.word	0x40011800
 8001028:	40011c00 	.word	0x40011c00
 800102c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_GPIO_Init+0x324>)
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	43db      	mvns	r3, r3
 8001038:	4913      	ldr	r1, [pc, #76]	; (8001088 <HAL_GPIO_Init+0x324>)
 800103a:	4013      	ands	r3, r2
 800103c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d006      	beq.n	8001058 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <HAL_GPIO_Init+0x324>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	490e      	ldr	r1, [pc, #56]	; (8001088 <HAL_GPIO_Init+0x324>)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	4313      	orrs	r3, r2
 8001054:	600b      	str	r3, [r1, #0]
 8001056:	e006      	b.n	8001066 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_GPIO_Init+0x324>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	43db      	mvns	r3, r3
 8001060:	4909      	ldr	r1, [pc, #36]	; (8001088 <HAL_GPIO_Init+0x324>)
 8001062:	4013      	ands	r3, r2
 8001064:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	3301      	adds	r3, #1
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	fa22 f303 	lsr.w	r3, r2, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	f47f ae7e 	bne.w	8000d78 <HAL_GPIO_Init+0x14>
  }
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	372c      	adds	r7, #44	; 0x2c
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	40010400 	.word	0x40010400

0800108c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e12b      	b.n	80012f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d106      	bne.n	80010b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff fab4 	bl	8000620 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2224      	movs	r2, #36	; 0x24
 80010bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 0201 	bic.w	r2, r2, #1
 80010ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80010de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010f0:	f001 f832 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
 80010f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	4a81      	ldr	r2, [pc, #516]	; (8001300 <HAL_I2C_Init+0x274>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d807      	bhi.n	8001110 <HAL_I2C_Init+0x84>
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4a80      	ldr	r2, [pc, #512]	; (8001304 <HAL_I2C_Init+0x278>)
 8001104:	4293      	cmp	r3, r2
 8001106:	bf94      	ite	ls
 8001108:	2301      	movls	r3, #1
 800110a:	2300      	movhi	r3, #0
 800110c:	b2db      	uxtb	r3, r3
 800110e:	e006      	b.n	800111e <HAL_I2C_Init+0x92>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4a7d      	ldr	r2, [pc, #500]	; (8001308 <HAL_I2C_Init+0x27c>)
 8001114:	4293      	cmp	r3, r2
 8001116:	bf94      	ite	ls
 8001118:	2301      	movls	r3, #1
 800111a:	2300      	movhi	r3, #0
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e0e7      	b.n	80012f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	4a78      	ldr	r2, [pc, #480]	; (800130c <HAL_I2C_Init+0x280>)
 800112a:	fba2 2303 	umull	r2, r3, r2, r3
 800112e:	0c9b      	lsrs	r3, r3, #18
 8001130:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	430a      	orrs	r2, r1
 8001144:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6a1b      	ldr	r3, [r3, #32]
 800114c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	4a6a      	ldr	r2, [pc, #424]	; (8001300 <HAL_I2C_Init+0x274>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d802      	bhi.n	8001160 <HAL_I2C_Init+0xd4>
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	3301      	adds	r3, #1
 800115e:	e009      	b.n	8001174 <HAL_I2C_Init+0xe8>
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001166:	fb02 f303 	mul.w	r3, r2, r3
 800116a:	4a69      	ldr	r2, [pc, #420]	; (8001310 <HAL_I2C_Init+0x284>)
 800116c:	fba2 2303 	umull	r2, r3, r2, r3
 8001170:	099b      	lsrs	r3, r3, #6
 8001172:	3301      	adds	r3, #1
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	6812      	ldr	r2, [r2, #0]
 8001178:	430b      	orrs	r3, r1
 800117a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001186:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	495c      	ldr	r1, [pc, #368]	; (8001300 <HAL_I2C_Init+0x274>)
 8001190:	428b      	cmp	r3, r1
 8001192:	d819      	bhi.n	80011c8 <HAL_I2C_Init+0x13c>
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	1e59      	subs	r1, r3, #1
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	fbb1 f3f3 	udiv	r3, r1, r3
 80011a2:	1c59      	adds	r1, r3, #1
 80011a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80011a8:	400b      	ands	r3, r1
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00a      	beq.n	80011c4 <HAL_I2C_Init+0x138>
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	1e59      	subs	r1, r3, #1
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80011bc:	3301      	adds	r3, #1
 80011be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011c2:	e051      	b.n	8001268 <HAL_I2C_Init+0x1dc>
 80011c4:	2304      	movs	r3, #4
 80011c6:	e04f      	b.n	8001268 <HAL_I2C_Init+0x1dc>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d111      	bne.n	80011f4 <HAL_I2C_Init+0x168>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	1e58      	subs	r0, r3, #1
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6859      	ldr	r1, [r3, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	440b      	add	r3, r1
 80011de:	fbb0 f3f3 	udiv	r3, r0, r3
 80011e2:	3301      	adds	r3, #1
 80011e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	bf0c      	ite	eq
 80011ec:	2301      	moveq	r3, #1
 80011ee:	2300      	movne	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	e012      	b.n	800121a <HAL_I2C_Init+0x18e>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	1e58      	subs	r0, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6859      	ldr	r1, [r3, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	0099      	lsls	r1, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	fbb0 f3f3 	udiv	r3, r0, r3
 800120a:	3301      	adds	r3, #1
 800120c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001210:	2b00      	cmp	r3, #0
 8001212:	bf0c      	ite	eq
 8001214:	2301      	moveq	r3, #1
 8001216:	2300      	movne	r3, #0
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_I2C_Init+0x196>
 800121e:	2301      	movs	r3, #1
 8001220:	e022      	b.n	8001268 <HAL_I2C_Init+0x1dc>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d10e      	bne.n	8001248 <HAL_I2C_Init+0x1bc>
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	1e58      	subs	r0, r3, #1
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6859      	ldr	r1, [r3, #4]
 8001232:	460b      	mov	r3, r1
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	440b      	add	r3, r1
 8001238:	fbb0 f3f3 	udiv	r3, r0, r3
 800123c:	3301      	adds	r3, #1
 800123e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001246:	e00f      	b.n	8001268 <HAL_I2C_Init+0x1dc>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	1e58      	subs	r0, r3, #1
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6859      	ldr	r1, [r3, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	440b      	add	r3, r1
 8001256:	0099      	lsls	r1, r3, #2
 8001258:	440b      	add	r3, r1
 800125a:	fbb0 f3f3 	udiv	r3, r0, r3
 800125e:	3301      	adds	r3, #1
 8001260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	6809      	ldr	r1, [r1, #0]
 800126c:	4313      	orrs	r3, r2
 800126e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69da      	ldr	r2, [r3, #28]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001296:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6911      	ldr	r1, [r2, #16]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	68d2      	ldr	r2, [r2, #12]
 80012a2:	4311      	orrs	r1, r2
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6812      	ldr	r2, [r2, #0]
 80012a8:	430b      	orrs	r3, r1
 80012aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	695a      	ldr	r2, [r3, #20]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	431a      	orrs	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	430a      	orrs	r2, r1
 80012c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 0201 	orr.w	r2, r2, #1
 80012d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2220      	movs	r2, #32
 80012e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	000186a0 	.word	0x000186a0
 8001304:	001e847f 	.word	0x001e847f
 8001308:	003d08ff 	.word	0x003d08ff
 800130c:	431bde83 	.word	0x431bde83
 8001310:	10624dd3 	.word	0x10624dd3

08001314 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af02      	add	r7, sp, #8
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	461a      	mov	r2, r3
 8001320:	460b      	mov	r3, r1
 8001322:	817b      	strh	r3, [r7, #10]
 8001324:	4613      	mov	r3, r2
 8001326:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff fc0a 	bl	8000b40 <HAL_GetTick>
 800132c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b20      	cmp	r3, #32
 8001338:	f040 80e0 	bne.w	80014fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2319      	movs	r3, #25
 8001342:	2201      	movs	r2, #1
 8001344:	4970      	ldr	r1, [pc, #448]	; (8001508 <HAL_I2C_Master_Transmit+0x1f4>)
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f000 f964 	bl	8001614 <I2C_WaitOnFlagUntilTimeout>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001352:	2302      	movs	r3, #2
 8001354:	e0d3      	b.n	80014fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <HAL_I2C_Master_Transmit+0x50>
 8001360:	2302      	movs	r3, #2
 8001362:	e0cc      	b.n	80014fe <HAL_I2C_Master_Transmit+0x1ea>
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b01      	cmp	r3, #1
 8001378:	d007      	beq.n	800138a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f042 0201 	orr.w	r2, r2, #1
 8001388:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001398:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2221      	movs	r2, #33	; 0x21
 800139e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2210      	movs	r2, #16
 80013a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	893a      	ldrh	r2, [r7, #8]
 80013ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4a50      	ldr	r2, [pc, #320]	; (800150c <HAL_I2C_Master_Transmit+0x1f8>)
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80013cc:	8979      	ldrh	r1, [r7, #10]
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	6a3a      	ldr	r2, [r7, #32]
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f000 f89c 	bl	8001510 <I2C_MasterRequestWrite>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e08d      	b.n	80014fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80013f8:	e066      	b.n	80014c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	6a39      	ldr	r1, [r7, #32]
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f000 fa22 	bl	8001848 <I2C_WaitOnTXEFlagUntilTimeout>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00d      	beq.n	8001426 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	2b04      	cmp	r3, #4
 8001410:	d107      	bne.n	8001422 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001420:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e06b      	b.n	80014fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	781a      	ldrb	r2, [r3, #0]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001440:	b29b      	uxth	r3, r3
 8001442:	3b01      	subs	r3, #1
 8001444:	b29a      	uxth	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800144e:	3b01      	subs	r3, #1
 8001450:	b29a      	uxth	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b04      	cmp	r3, #4
 8001462:	d11b      	bne.n	800149c <HAL_I2C_Master_Transmit+0x188>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001468:	2b00      	cmp	r3, #0
 800146a:	d017      	beq.n	800149c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001470:	781a      	ldrb	r2, [r3, #0]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001486:	b29b      	uxth	r3, r3
 8001488:	3b01      	subs	r3, #1
 800148a:	b29a      	uxth	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001494:	3b01      	subs	r3, #1
 8001496:	b29a      	uxth	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	6a39      	ldr	r1, [r7, #32]
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f000 fa19 	bl	80018d8 <I2C_WaitOnBTFFlagUntilTimeout>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00d      	beq.n	80014c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d107      	bne.n	80014c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e01a      	b.n	80014fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d194      	bne.n	80013fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2220      	movs	r2, #32
 80014e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2200      	movs	r2, #0
 80014f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80014f8:	2300      	movs	r3, #0
 80014fa:	e000      	b.n	80014fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80014fc:	2302      	movs	r3, #2
  }
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	00100002 	.word	0x00100002
 800150c:	ffff0000 	.word	0xffff0000

08001510 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af02      	add	r7, sp, #8
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	607a      	str	r2, [r7, #4]
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	460b      	mov	r3, r1
 800151e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001524:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2b08      	cmp	r3, #8
 800152a:	d006      	beq.n	800153a <I2C_MasterRequestWrite+0x2a>
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d003      	beq.n	800153a <I2C_MasterRequestWrite+0x2a>
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001538:	d108      	bne.n	800154c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	e00b      	b.n	8001564 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	2b12      	cmp	r3, #18
 8001552:	d107      	bne.n	8001564 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001562:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f000 f84f 	bl	8001614 <I2C_WaitOnFlagUntilTimeout>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d00d      	beq.n	8001598 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800158a:	d103      	bne.n	8001594 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001592:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e035      	b.n	8001604 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015a0:	d108      	bne.n	80015b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80015a2:	897b      	ldrh	r3, [r7, #10]
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	461a      	mov	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80015b0:	611a      	str	r2, [r3, #16]
 80015b2:	e01b      	b.n	80015ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80015b4:	897b      	ldrh	r3, [r7, #10]
 80015b6:	11db      	asrs	r3, r3, #7
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	f003 0306 	and.w	r3, r3, #6
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	f063 030f 	orn	r3, r3, #15
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	490e      	ldr	r1, [pc, #56]	; (800160c <I2C_MasterRequestWrite+0xfc>)
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f000 f898 	bl	8001708 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e010      	b.n	8001604 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80015e2:	897b      	ldrh	r3, [r7, #10]
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	4907      	ldr	r1, [pc, #28]	; (8001610 <I2C_MasterRequestWrite+0x100>)
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f000 f888 	bl	8001708 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	00010008 	.word	0x00010008
 8001610:	00010002 	.word	0x00010002

08001614 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	4613      	mov	r3, r2
 8001622:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001624:	e048      	b.n	80016b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162c:	d044      	beq.n	80016b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800162e:	f7ff fa87 	bl	8000b40 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	429a      	cmp	r2, r3
 800163c:	d302      	bcc.n	8001644 <I2C_WaitOnFlagUntilTimeout+0x30>
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d139      	bne.n	80016b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	0c1b      	lsrs	r3, r3, #16
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b01      	cmp	r3, #1
 800164c:	d10d      	bne.n	800166a <I2C_WaitOnFlagUntilTimeout+0x56>
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	43da      	mvns	r2, r3
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	4013      	ands	r3, r2
 800165a:	b29b      	uxth	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf0c      	ite	eq
 8001660:	2301      	moveq	r3, #1
 8001662:	2300      	movne	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	461a      	mov	r2, r3
 8001668:	e00c      	b.n	8001684 <I2C_WaitOnFlagUntilTimeout+0x70>
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	43da      	mvns	r2, r3
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	4013      	ands	r3, r2
 8001676:	b29b      	uxth	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	bf0c      	ite	eq
 800167c:	2301      	moveq	r3, #1
 800167e:	2300      	movne	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	461a      	mov	r2, r3
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	429a      	cmp	r2, r3
 8001688:	d116      	bne.n	80016b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2220      	movs	r2, #32
 8001694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	f043 0220 	orr.w	r2, r3, #32
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e023      	b.n	8001700 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	0c1b      	lsrs	r3, r3, #16
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d10d      	bne.n	80016de <I2C_WaitOnFlagUntilTimeout+0xca>
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	43da      	mvns	r2, r3
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	4013      	ands	r3, r2
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	bf0c      	ite	eq
 80016d4:	2301      	moveq	r3, #1
 80016d6:	2300      	movne	r3, #0
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	461a      	mov	r2, r3
 80016dc:	e00c      	b.n	80016f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	43da      	mvns	r2, r3
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	4013      	ands	r3, r2
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	bf0c      	ite	eq
 80016f0:	2301      	moveq	r3, #1
 80016f2:	2300      	movne	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	461a      	mov	r2, r3
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d093      	beq.n	8001626 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001716:	e071      	b.n	80017fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001726:	d123      	bne.n	8001770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001736:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001740:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2220      	movs	r2, #32
 800174c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	f043 0204 	orr.w	r2, r3, #4
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e067      	b.n	8001840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001776:	d041      	beq.n	80017fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001778:	f7ff f9e2 	bl	8000b40 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	429a      	cmp	r2, r3
 8001786:	d302      	bcc.n	800178e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d136      	bne.n	80017fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	0c1b      	lsrs	r3, r3, #16
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b01      	cmp	r3, #1
 8001796:	d10c      	bne.n	80017b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	43da      	mvns	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	4013      	ands	r3, r2
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	bf14      	ite	ne
 80017aa:	2301      	movne	r3, #1
 80017ac:	2300      	moveq	r3, #0
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	e00b      	b.n	80017ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	43da      	mvns	r2, r3
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	4013      	ands	r3, r2
 80017be:	b29b      	uxth	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	bf14      	ite	ne
 80017c4:	2301      	movne	r3, #1
 80017c6:	2300      	moveq	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d016      	beq.n	80017fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2220      	movs	r2, #32
 80017d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f043 0220 	orr.w	r2, r3, #32
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e021      	b.n	8001840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	0c1b      	lsrs	r3, r3, #16
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b01      	cmp	r3, #1
 8001804:	d10c      	bne.n	8001820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	43da      	mvns	r2, r3
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	4013      	ands	r3, r2
 8001812:	b29b      	uxth	r3, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	bf14      	ite	ne
 8001818:	2301      	movne	r3, #1
 800181a:	2300      	moveq	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	e00b      	b.n	8001838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	43da      	mvns	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4013      	ands	r3, r2
 800182c:	b29b      	uxth	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	bf14      	ite	ne
 8001832:	2301      	movne	r3, #1
 8001834:	2300      	moveq	r3, #0
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	f47f af6d 	bne.w	8001718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	4618      	mov	r0, r3
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001854:	e034      	b.n	80018c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 f886 	bl	8001968 <I2C_IsAcknowledgeFailed>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e034      	b.n	80018d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186c:	d028      	beq.n	80018c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800186e:	f7ff f967 	bl	8000b40 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	429a      	cmp	r2, r3
 800187c:	d302      	bcc.n	8001884 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d11d      	bne.n	80018c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188e:	2b80      	cmp	r3, #128	; 0x80
 8001890:	d016      	beq.n	80018c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2220      	movs	r2, #32
 800189c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	f043 0220 	orr.w	r2, r3, #32
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e007      	b.n	80018d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ca:	2b80      	cmp	r3, #128	; 0x80
 80018cc:	d1c3      	bne.n	8001856 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80018e4:	e034      	b.n	8001950 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 f83e 	bl	8001968 <I2C_IsAcknowledgeFailed>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e034      	b.n	8001960 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018fc:	d028      	beq.n	8001950 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018fe:	f7ff f91f 	bl	8000b40 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	429a      	cmp	r2, r3
 800190c:	d302      	bcc.n	8001914 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d11d      	bne.n	8001950 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	2b04      	cmp	r3, #4
 8001920:	d016      	beq.n	8001950 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2200      	movs	r2, #0
 8001926:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2220      	movs	r2, #32
 800192c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	f043 0220 	orr.w	r2, r3, #32
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e007      	b.n	8001960 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	f003 0304 	and.w	r3, r3, #4
 800195a:	2b04      	cmp	r3, #4
 800195c:	d1c3      	bne.n	80018e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800197e:	d11b      	bne.n	80019b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001988:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2220      	movs	r2, #32
 8001994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	f043 0204 	orr.w	r2, r3, #4
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr

080019c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e272      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 8087 	beq.w	8001af2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019e4:	4b92      	ldr	r3, [pc, #584]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 030c 	and.w	r3, r3, #12
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d00c      	beq.n	8001a0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019f0:	4b8f      	ldr	r3, [pc, #572]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 030c 	and.w	r3, r3, #12
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d112      	bne.n	8001a22 <HAL_RCC_OscConfig+0x5e>
 80019fc:	4b8c      	ldr	r3, [pc, #560]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a08:	d10b      	bne.n	8001a22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0a:	4b89      	ldr	r3, [pc, #548]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d06c      	beq.n	8001af0 <HAL_RCC_OscConfig+0x12c>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d168      	bne.n	8001af0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e24c      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a2a:	d106      	bne.n	8001a3a <HAL_RCC_OscConfig+0x76>
 8001a2c:	4b80      	ldr	r3, [pc, #512]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a7f      	ldr	r2, [pc, #508]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	e02e      	b.n	8001a98 <HAL_RCC_OscConfig+0xd4>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x98>
 8001a42:	4b7b      	ldr	r3, [pc, #492]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a7a      	ldr	r2, [pc, #488]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4b78      	ldr	r3, [pc, #480]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a77      	ldr	r2, [pc, #476]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e01d      	b.n	8001a98 <HAL_RCC_OscConfig+0xd4>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a64:	d10c      	bne.n	8001a80 <HAL_RCC_OscConfig+0xbc>
 8001a66:	4b72      	ldr	r3, [pc, #456]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a71      	ldr	r2, [pc, #452]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	4b6f      	ldr	r3, [pc, #444]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a6e      	ldr	r2, [pc, #440]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e00b      	b.n	8001a98 <HAL_RCC_OscConfig+0xd4>
 8001a80:	4b6b      	ldr	r3, [pc, #428]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a6a      	ldr	r2, [pc, #424]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b68      	ldr	r3, [pc, #416]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a67      	ldr	r2, [pc, #412]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d013      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f84e 	bl	8000b40 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff f84a 	bl	8000b40 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e200      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aba:	4b5d      	ldr	r3, [pc, #372]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0xe4>
 8001ac6:	e014      	b.n	8001af2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7ff f83a 	bl	8000b40 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff f836 	bl	8000b40 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e1ec      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae2:	4b53      	ldr	r3, [pc, #332]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x10c>
 8001aee:	e000      	b.n	8001af2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d063      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001afe:	4b4c      	ldr	r3, [pc, #304]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00b      	beq.n	8001b22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b0a:	4b49      	ldr	r3, [pc, #292]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d11c      	bne.n	8001b50 <HAL_RCC_OscConfig+0x18c>
 8001b16:	4b46      	ldr	r3, [pc, #280]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d116      	bne.n	8001b50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b22:	4b43      	ldr	r3, [pc, #268]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d005      	beq.n	8001b3a <HAL_RCC_OscConfig+0x176>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d001      	beq.n	8001b3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e1c0      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3a:	4b3d      	ldr	r3, [pc, #244]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4939      	ldr	r1, [pc, #228]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4e:	e03a      	b.n	8001bc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d020      	beq.n	8001b9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b58:	4b36      	ldr	r3, [pc, #216]	; (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5e:	f7fe ffef 	bl	8000b40 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b66:	f7fe ffeb 	bl	8000b40 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e1a1      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b78:	4b2d      	ldr	r3, [pc, #180]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b84:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4927      	ldr	r1, [pc, #156]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	600b      	str	r3, [r1, #0]
 8001b98:	e015      	b.n	8001bc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b9a:	4b26      	ldr	r3, [pc, #152]	; (8001c34 <HAL_RCC_OscConfig+0x270>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7fe ffce 	bl	8000b40 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba8:	f7fe ffca 	bl	8000b40 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e180      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bba:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d03a      	beq.n	8001c48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d019      	beq.n	8001c0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bda:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <HAL_RCC_OscConfig+0x274>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be0:	f7fe ffae 	bl	8000b40 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be8:	f7fe ffaa 	bl	8000b40 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e160      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c06:	2001      	movs	r0, #1
 8001c08:	f000 faba 	bl	8002180 <RCC_Delay>
 8001c0c:	e01c      	b.n	8001c48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_RCC_OscConfig+0x274>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c14:	f7fe ff94 	bl	8000b40 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c1a:	e00f      	b.n	8001c3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c1c:	f7fe ff90 	bl	8000b40 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d908      	bls.n	8001c3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e146      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
 8001c2e:	bf00      	nop
 8001c30:	40021000 	.word	0x40021000
 8001c34:	42420000 	.word	0x42420000
 8001c38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c3c:	4b92      	ldr	r3, [pc, #584]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1e9      	bne.n	8001c1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80a6 	beq.w	8001da2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c5a:	4b8b      	ldr	r3, [pc, #556]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10d      	bne.n	8001c82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c66:	4b88      	ldr	r3, [pc, #544]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	4a87      	ldr	r2, [pc, #540]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c70:	61d3      	str	r3, [r2, #28]
 8001c72:	4b85      	ldr	r3, [pc, #532]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c82:	4b82      	ldr	r3, [pc, #520]	; (8001e8c <HAL_RCC_OscConfig+0x4c8>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d118      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c8e:	4b7f      	ldr	r3, [pc, #508]	; (8001e8c <HAL_RCC_OscConfig+0x4c8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a7e      	ldr	r2, [pc, #504]	; (8001e8c <HAL_RCC_OscConfig+0x4c8>)
 8001c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c9a:	f7fe ff51 	bl	8000b40 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca2:	f7fe ff4d 	bl	8000b40 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b64      	cmp	r3, #100	; 0x64
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e103      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb4:	4b75      	ldr	r3, [pc, #468]	; (8001e8c <HAL_RCC_OscConfig+0x4c8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d106      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x312>
 8001cc8:	4b6f      	ldr	r3, [pc, #444]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	4a6e      	ldr	r2, [pc, #440]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6213      	str	r3, [r2, #32]
 8001cd4:	e02d      	b.n	8001d32 <HAL_RCC_OscConfig+0x36e>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x334>
 8001cde:	4b6a      	ldr	r3, [pc, #424]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	4a69      	ldr	r2, [pc, #420]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	6213      	str	r3, [r2, #32]
 8001cea:	4b67      	ldr	r3, [pc, #412]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	4a66      	ldr	r2, [pc, #408]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	f023 0304 	bic.w	r3, r3, #4
 8001cf4:	6213      	str	r3, [r2, #32]
 8001cf6:	e01c      	b.n	8001d32 <HAL_RCC_OscConfig+0x36e>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2b05      	cmp	r3, #5
 8001cfe:	d10c      	bne.n	8001d1a <HAL_RCC_OscConfig+0x356>
 8001d00:	4b61      	ldr	r3, [pc, #388]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	4a60      	ldr	r2, [pc, #384]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001d06:	f043 0304 	orr.w	r3, r3, #4
 8001d0a:	6213      	str	r3, [r2, #32]
 8001d0c:	4b5e      	ldr	r3, [pc, #376]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	4a5d      	ldr	r2, [pc, #372]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	6213      	str	r3, [r2, #32]
 8001d18:	e00b      	b.n	8001d32 <HAL_RCC_OscConfig+0x36e>
 8001d1a:	4b5b      	ldr	r3, [pc, #364]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	6a1b      	ldr	r3, [r3, #32]
 8001d1e:	4a5a      	ldr	r2, [pc, #360]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	6213      	str	r3, [r2, #32]
 8001d26:	4b58      	ldr	r3, [pc, #352]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	4a57      	ldr	r2, [pc, #348]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001d2c:	f023 0304 	bic.w	r3, r3, #4
 8001d30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d015      	beq.n	8001d66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3a:	f7fe ff01 	bl	8000b40 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d40:	e00a      	b.n	8001d58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d42:	f7fe fefd 	bl	8000b40 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e0b1      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d58:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0ee      	beq.n	8001d42 <HAL_RCC_OscConfig+0x37e>
 8001d64:	e014      	b.n	8001d90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d66:	f7fe feeb 	bl	8000b40 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6c:	e00a      	b.n	8001d84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6e:	f7fe fee7 	bl	8000b40 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e09b      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d84:	4b40      	ldr	r3, [pc, #256]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1ee      	bne.n	8001d6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d90:	7dfb      	ldrb	r3, [r7, #23]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d105      	bne.n	8001da2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d96:	4b3c      	ldr	r3, [pc, #240]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	4a3b      	ldr	r2, [pc, #236]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001da0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 8087 	beq.w	8001eba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dac:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 030c 	and.w	r3, r3, #12
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d061      	beq.n	8001e7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d146      	bne.n	8001e4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc0:	4b33      	ldr	r3, [pc, #204]	; (8001e90 <HAL_RCC_OscConfig+0x4cc>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc6:	f7fe febb 	bl	8000b40 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dce:	f7fe feb7 	bl	8000b40 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e06d      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de0:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f0      	bne.n	8001dce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df4:	d108      	bne.n	8001e08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001df6:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	4921      	ldr	r1, [pc, #132]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e08:	4b1f      	ldr	r3, [pc, #124]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a19      	ldr	r1, [r3, #32]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	430b      	orrs	r3, r1
 8001e1a:	491b      	ldr	r1, [pc, #108]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e20:	4b1b      	ldr	r3, [pc, #108]	; (8001e90 <HAL_RCC_OscConfig+0x4cc>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e26:	f7fe fe8b 	bl	8000b40 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2e:	f7fe fe87 	bl	8000b40 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e03d      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0f0      	beq.n	8001e2e <HAL_RCC_OscConfig+0x46a>
 8001e4c:	e035      	b.n	8001eba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4e:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <HAL_RCC_OscConfig+0x4cc>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e54:	f7fe fe74 	bl	8000b40 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5c:	f7fe fe70 	bl	8000b40 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e026      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6e:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <HAL_RCC_OscConfig+0x4c4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x498>
 8001e7a:	e01e      	b.n	8001eba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d107      	bne.n	8001e94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e019      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40007000 	.word	0x40007000
 8001e90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x500>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d001      	beq.n	8001eba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40021000 	.word	0x40021000

08001ec8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0d0      	b.n	800207e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001edc:	4b6a      	ldr	r3, [pc, #424]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d910      	bls.n	8001f0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eea:	4b67      	ldr	r3, [pc, #412]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f023 0207 	bic.w	r2, r3, #7
 8001ef2:	4965      	ldr	r1, [pc, #404]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efa:	4b63      	ldr	r3, [pc, #396]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d001      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0b8      	b.n	800207e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d020      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f24:	4b59      	ldr	r3, [pc, #356]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	4a58      	ldr	r2, [pc, #352]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f3c:	4b53      	ldr	r3, [pc, #332]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	4a52      	ldr	r2, [pc, #328]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f48:	4b50      	ldr	r3, [pc, #320]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	494d      	ldr	r1, [pc, #308]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d040      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d107      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	4b47      	ldr	r3, [pc, #284]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d115      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e07f      	b.n	800207e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d107      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f86:	4b41      	ldr	r3, [pc, #260]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d109      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e073      	b.n	800207e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f96:	4b3d      	ldr	r3, [pc, #244]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e06b      	b.n	800207e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa6:	4b39      	ldr	r3, [pc, #228]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f023 0203 	bic.w	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	4936      	ldr	r1, [pc, #216]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb8:	f7fe fdc2 	bl	8000b40 <HAL_GetTick>
 8001fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc0:	f7fe fdbe 	bl	8000b40 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e053      	b.n	800207e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd6:	4b2d      	ldr	r3, [pc, #180]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 020c 	and.w	r2, r3, #12
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d1eb      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b27      	ldr	r3, [pc, #156]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d210      	bcs.n	8002018 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b24      	ldr	r3, [pc, #144]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 0207 	bic.w	r2, r3, #7
 8001ffe:	4922      	ldr	r1, [pc, #136]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b20      	ldr	r3, [pc, #128]	; (8002088 <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e032      	b.n	800207e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002024:	4b19      	ldr	r3, [pc, #100]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4916      	ldr	r1, [pc, #88]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8002032:	4313      	orrs	r3, r2
 8002034:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d009      	beq.n	8002056 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002042:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	490e      	ldr	r1, [pc, #56]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	4313      	orrs	r3, r2
 8002054:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002056:	f000 f821 	bl	800209c <HAL_RCC_GetSysClockFreq>
 800205a:	4602      	mov	r2, r0
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	490a      	ldr	r1, [pc, #40]	; (8002090 <HAL_RCC_ClockConfig+0x1c8>)
 8002068:	5ccb      	ldrb	r3, [r1, r3]
 800206a:	fa22 f303 	lsr.w	r3, r2, r3
 800206e:	4a09      	ldr	r2, [pc, #36]	; (8002094 <HAL_RCC_ClockConfig+0x1cc>)
 8002070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_RCC_ClockConfig+0x1d0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fd20 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40022000 	.word	0x40022000
 800208c:	40021000 	.word	0x40021000
 8002090:	080034ac 	.word	0x080034ac
 8002094:	20000000 	.word	0x20000000
 8002098:	20000004 	.word	0x20000004

0800209c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800209c:	b480      	push	{r7}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	2300      	movs	r3, #0
 80020b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020b6:	4b1e      	ldr	r3, [pc, #120]	; (8002130 <HAL_RCC_GetSysClockFreq+0x94>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d002      	beq.n	80020cc <HAL_RCC_GetSysClockFreq+0x30>
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d003      	beq.n	80020d2 <HAL_RCC_GetSysClockFreq+0x36>
 80020ca:	e027      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ce:	613b      	str	r3, [r7, #16]
      break;
 80020d0:	e027      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	0c9b      	lsrs	r3, r3, #18
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	4a17      	ldr	r2, [pc, #92]	; (8002138 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020dc:	5cd3      	ldrb	r3, [r2, r3]
 80020de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d010      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020ea:	4b11      	ldr	r3, [pc, #68]	; (8002130 <HAL_RCC_GetSysClockFreq+0x94>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	0c5b      	lsrs	r3, r3, #17
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	4a11      	ldr	r2, [pc, #68]	; (800213c <HAL_RCC_GetSysClockFreq+0xa0>)
 80020f6:	5cd3      	ldrb	r3, [r2, r3]
 80020f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a0d      	ldr	r2, [pc, #52]	; (8002134 <HAL_RCC_GetSysClockFreq+0x98>)
 80020fe:	fb03 f202 	mul.w	r2, r3, r2
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	fbb2 f3f3 	udiv	r3, r2, r3
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	e004      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a0c      	ldr	r2, [pc, #48]	; (8002140 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002110:	fb02 f303 	mul.w	r3, r2, r3
 8002114:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	613b      	str	r3, [r7, #16]
      break;
 800211a:	e002      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <HAL_RCC_GetSysClockFreq+0x98>)
 800211e:	613b      	str	r3, [r7, #16]
      break;
 8002120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002122:	693b      	ldr	r3, [r7, #16]
}
 8002124:	4618      	mov	r0, r3
 8002126:	371c      	adds	r7, #28
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000
 8002134:	007a1200 	.word	0x007a1200
 8002138:	080034c4 	.word	0x080034c4
 800213c:	080034d4 	.word	0x080034d4
 8002140:	003d0900 	.word	0x003d0900

08002144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002148:	4b02      	ldr	r3, [pc, #8]	; (8002154 <HAL_RCC_GetHCLKFreq+0x10>)
 800214a:	681b      	ldr	r3, [r3, #0]
}
 800214c:	4618      	mov	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr
 8002154:	20000000 	.word	0x20000000

08002158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800215c:	f7ff fff2 	bl	8002144 <HAL_RCC_GetHCLKFreq>
 8002160:	4602      	mov	r2, r0
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	0a1b      	lsrs	r3, r3, #8
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	4903      	ldr	r1, [pc, #12]	; (800217c <HAL_RCC_GetPCLK1Freq+0x24>)
 800216e:	5ccb      	ldrb	r3, [r1, r3]
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002174:	4618      	mov	r0, r3
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000
 800217c:	080034bc 	.word	0x080034bc

08002180 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002188:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <RCC_Delay+0x34>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <RCC_Delay+0x38>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	0a5b      	lsrs	r3, r3, #9
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	fb02 f303 	mul.w	r3, r2, r3
 800219a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800219c:	bf00      	nop
  }
  while (Delay --);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1e5a      	subs	r2, r3, #1
 80021a2:	60fa      	str	r2, [r7, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f9      	bne.n	800219c <RCC_Delay+0x1c>
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	20000000 	.word	0x20000000
 80021b8:	10624dd3 	.word	0x10624dd3

080021bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e041      	b.n	8002252 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7fe fbcc 	bl	8000980 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3304      	adds	r3, #4
 80021f8:	4619      	mov	r1, r3
 80021fa:	4610      	mov	r0, r2
 80021fc:	f000 faca 	bl	8002794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e041      	b.n	80022f0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d106      	bne.n	8002286 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 f839 	bl	80022f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2202      	movs	r2, #2
 800228a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3304      	adds	r3, #4
 8002296:	4619      	mov	r1, r3
 8002298:	4610      	mov	r0, r2
 800229a:	f000 fa7b 	bl	8002794 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3708      	adds	r7, #8
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr
	...

0800230c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d109      	bne.n	8002330 <HAL_TIM_PWM_Start+0x24>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b01      	cmp	r3, #1
 8002326:	bf14      	ite	ne
 8002328:	2301      	movne	r3, #1
 800232a:	2300      	moveq	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	e022      	b.n	8002376 <HAL_TIM_PWM_Start+0x6a>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	2b04      	cmp	r3, #4
 8002334:	d109      	bne.n	800234a <HAL_TIM_PWM_Start+0x3e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2b01      	cmp	r3, #1
 8002340:	bf14      	ite	ne
 8002342:	2301      	movne	r3, #1
 8002344:	2300      	moveq	r3, #0
 8002346:	b2db      	uxtb	r3, r3
 8002348:	e015      	b.n	8002376 <HAL_TIM_PWM_Start+0x6a>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b08      	cmp	r3, #8
 800234e:	d109      	bne.n	8002364 <HAL_TIM_PWM_Start+0x58>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b01      	cmp	r3, #1
 800235a:	bf14      	ite	ne
 800235c:	2301      	movne	r3, #1
 800235e:	2300      	moveq	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	e008      	b.n	8002376 <HAL_TIM_PWM_Start+0x6a>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b01      	cmp	r3, #1
 800236e:	bf14      	ite	ne
 8002370:	2301      	movne	r3, #1
 8002372:	2300      	moveq	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e072      	b.n	8002464 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d104      	bne.n	800238e <HAL_TIM_PWM_Start+0x82>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800238c:	e013      	b.n	80023b6 <HAL_TIM_PWM_Start+0xaa>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b04      	cmp	r3, #4
 8002392:	d104      	bne.n	800239e <HAL_TIM_PWM_Start+0x92>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800239c:	e00b      	b.n	80023b6 <HAL_TIM_PWM_Start+0xaa>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d104      	bne.n	80023ae <HAL_TIM_PWM_Start+0xa2>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023ac:	e003      	b.n	80023b6 <HAL_TIM_PWM_Start+0xaa>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2202      	movs	r2, #2
 80023b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2201      	movs	r2, #1
 80023bc:	6839      	ldr	r1, [r7, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 fcb0 	bl	8002d24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a28      	ldr	r2, [pc, #160]	; (800246c <HAL_TIM_PWM_Start+0x160>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d004      	beq.n	80023d8 <HAL_TIM_PWM_Start+0xcc>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a27      	ldr	r2, [pc, #156]	; (8002470 <HAL_TIM_PWM_Start+0x164>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d101      	bne.n	80023dc <HAL_TIM_PWM_Start+0xd0>
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <HAL_TIM_PWM_Start+0xd2>
 80023dc:	2300      	movs	r3, #0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d007      	beq.n	80023f2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a1d      	ldr	r2, [pc, #116]	; (800246c <HAL_TIM_PWM_Start+0x160>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d018      	beq.n	800242e <HAL_TIM_PWM_Start+0x122>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a1b      	ldr	r2, [pc, #108]	; (8002470 <HAL_TIM_PWM_Start+0x164>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d013      	beq.n	800242e <HAL_TIM_PWM_Start+0x122>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240e:	d00e      	beq.n	800242e <HAL_TIM_PWM_Start+0x122>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a17      	ldr	r2, [pc, #92]	; (8002474 <HAL_TIM_PWM_Start+0x168>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d009      	beq.n	800242e <HAL_TIM_PWM_Start+0x122>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a16      	ldr	r2, [pc, #88]	; (8002478 <HAL_TIM_PWM_Start+0x16c>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d004      	beq.n	800242e <HAL_TIM_PWM_Start+0x122>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a14      	ldr	r2, [pc, #80]	; (800247c <HAL_TIM_PWM_Start+0x170>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d111      	bne.n	8002452 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b06      	cmp	r3, #6
 800243e:	d010      	beq.n	8002462 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002450:	e007      	b.n	8002462 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f042 0201 	orr.w	r2, r2, #1
 8002460:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	40012c00 	.word	0x40012c00
 8002470:	40013400 	.word	0x40013400
 8002474:	40000400 	.word	0x40000400
 8002478:	40000800 	.word	0x40000800
 800247c:	40000c00 	.word	0x40000c00

08002480 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800249a:	2302      	movs	r3, #2
 800249c:	e0ae      	b.n	80025fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b0c      	cmp	r3, #12
 80024aa:	f200 809f 	bhi.w	80025ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80024ae:	a201      	add	r2, pc, #4	; (adr r2, 80024b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80024b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b4:	080024e9 	.word	0x080024e9
 80024b8:	080025ed 	.word	0x080025ed
 80024bc:	080025ed 	.word	0x080025ed
 80024c0:	080025ed 	.word	0x080025ed
 80024c4:	08002529 	.word	0x08002529
 80024c8:	080025ed 	.word	0x080025ed
 80024cc:	080025ed 	.word	0x080025ed
 80024d0:	080025ed 	.word	0x080025ed
 80024d4:	0800256b 	.word	0x0800256b
 80024d8:	080025ed 	.word	0x080025ed
 80024dc:	080025ed 	.word	0x080025ed
 80024e0:	080025ed 	.word	0x080025ed
 80024e4:	080025ab 	.word	0x080025ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68b9      	ldr	r1, [r7, #8]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 f9d6 	bl	80028a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699a      	ldr	r2, [r3, #24]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0208 	orr.w	r2, r2, #8
 8002502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699a      	ldr	r2, [r3, #24]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0204 	bic.w	r2, r2, #4
 8002512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6999      	ldr	r1, [r3, #24]
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	691a      	ldr	r2, [r3, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	619a      	str	r2, [r3, #24]
      break;
 8002526:	e064      	b.n	80025f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68b9      	ldr	r1, [r7, #8]
 800252e:	4618      	mov	r0, r3
 8002530:	f000 fa26 	bl	8002980 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699a      	ldr	r2, [r3, #24]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6999      	ldr	r1, [r3, #24]
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	021a      	lsls	r2, r3, #8
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	619a      	str	r2, [r3, #24]
      break;
 8002568:	e043      	b.n	80025f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68b9      	ldr	r1, [r7, #8]
 8002570:	4618      	mov	r0, r3
 8002572:	f000 fa79 	bl	8002a68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	69da      	ldr	r2, [r3, #28]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f042 0208 	orr.w	r2, r2, #8
 8002584:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	69da      	ldr	r2, [r3, #28]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0204 	bic.w	r2, r2, #4
 8002594:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	69d9      	ldr	r1, [r3, #28]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	61da      	str	r2, [r3, #28]
      break;
 80025a8:	e023      	b.n	80025f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68b9      	ldr	r1, [r7, #8]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f000 facd 	bl	8002b50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	69da      	ldr	r2, [r3, #28]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	69da      	ldr	r2, [r3, #28]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	69d9      	ldr	r1, [r3, #28]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	021a      	lsls	r2, r3, #8
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	61da      	str	r2, [r3, #28]
      break;
 80025ea:	e002      	b.n	80025f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	75fb      	strb	r3, [r7, #23]
      break;
 80025f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_TIM_ConfigClockSource+0x1c>
 800261c:	2302      	movs	r3, #2
 800261e:	e0b4      	b.n	800278a <HAL_TIM_ConfigClockSource+0x186>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800263e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002646:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002658:	d03e      	beq.n	80026d8 <HAL_TIM_ConfigClockSource+0xd4>
 800265a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800265e:	f200 8087 	bhi.w	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 8002662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002666:	f000 8086 	beq.w	8002776 <HAL_TIM_ConfigClockSource+0x172>
 800266a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266e:	d87f      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 8002670:	2b70      	cmp	r3, #112	; 0x70
 8002672:	d01a      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0xa6>
 8002674:	2b70      	cmp	r3, #112	; 0x70
 8002676:	d87b      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 8002678:	2b60      	cmp	r3, #96	; 0x60
 800267a:	d050      	beq.n	800271e <HAL_TIM_ConfigClockSource+0x11a>
 800267c:	2b60      	cmp	r3, #96	; 0x60
 800267e:	d877      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 8002680:	2b50      	cmp	r3, #80	; 0x50
 8002682:	d03c      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0xfa>
 8002684:	2b50      	cmp	r3, #80	; 0x50
 8002686:	d873      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 8002688:	2b40      	cmp	r3, #64	; 0x40
 800268a:	d058      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x13a>
 800268c:	2b40      	cmp	r3, #64	; 0x40
 800268e:	d86f      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 8002690:	2b30      	cmp	r3, #48	; 0x30
 8002692:	d064      	beq.n	800275e <HAL_TIM_ConfigClockSource+0x15a>
 8002694:	2b30      	cmp	r3, #48	; 0x30
 8002696:	d86b      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 8002698:	2b20      	cmp	r3, #32
 800269a:	d060      	beq.n	800275e <HAL_TIM_ConfigClockSource+0x15a>
 800269c:	2b20      	cmp	r3, #32
 800269e:	d867      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d05c      	beq.n	800275e <HAL_TIM_ConfigClockSource+0x15a>
 80026a4:	2b10      	cmp	r3, #16
 80026a6:	d05a      	beq.n	800275e <HAL_TIM_ConfigClockSource+0x15a>
 80026a8:	e062      	b.n	8002770 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026ba:	f000 fb14 	bl	8002ce6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	609a      	str	r2, [r3, #8]
      break;
 80026d6:	e04f      	b.n	8002778 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026e8:	f000 fafd 	bl	8002ce6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026fa:	609a      	str	r2, [r3, #8]
      break;
 80026fc:	e03c      	b.n	8002778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800270a:	461a      	mov	r2, r3
 800270c:	f000 fa74 	bl	8002bf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2150      	movs	r1, #80	; 0x50
 8002716:	4618      	mov	r0, r3
 8002718:	f000 facb 	bl	8002cb2 <TIM_ITRx_SetConfig>
      break;
 800271c:	e02c      	b.n	8002778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800272a:	461a      	mov	r2, r3
 800272c:	f000 fa92 	bl	8002c54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2160      	movs	r1, #96	; 0x60
 8002736:	4618      	mov	r0, r3
 8002738:	f000 fabb 	bl	8002cb2 <TIM_ITRx_SetConfig>
      break;
 800273c:	e01c      	b.n	8002778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800274a:	461a      	mov	r2, r3
 800274c:	f000 fa54 	bl	8002bf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2140      	movs	r1, #64	; 0x40
 8002756:	4618      	mov	r0, r3
 8002758:	f000 faab 	bl	8002cb2 <TIM_ITRx_SetConfig>
      break;
 800275c:	e00c      	b.n	8002778 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4619      	mov	r1, r3
 8002768:	4610      	mov	r0, r2
 800276a:	f000 faa2 	bl	8002cb2 <TIM_ITRx_SetConfig>
      break;
 800276e:	e003      	b.n	8002778 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
      break;
 8002774:	e000      	b.n	8002778 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002776:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002788:	7bfb      	ldrb	r3, [r7, #15]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a39      	ldr	r2, [pc, #228]	; (800288c <TIM_Base_SetConfig+0xf8>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d013      	beq.n	80027d4 <TIM_Base_SetConfig+0x40>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a38      	ldr	r2, [pc, #224]	; (8002890 <TIM_Base_SetConfig+0xfc>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d00f      	beq.n	80027d4 <TIM_Base_SetConfig+0x40>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ba:	d00b      	beq.n	80027d4 <TIM_Base_SetConfig+0x40>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a35      	ldr	r2, [pc, #212]	; (8002894 <TIM_Base_SetConfig+0x100>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d007      	beq.n	80027d4 <TIM_Base_SetConfig+0x40>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a34      	ldr	r2, [pc, #208]	; (8002898 <TIM_Base_SetConfig+0x104>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d003      	beq.n	80027d4 <TIM_Base_SetConfig+0x40>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a33      	ldr	r2, [pc, #204]	; (800289c <TIM_Base_SetConfig+0x108>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d108      	bne.n	80027e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a28      	ldr	r2, [pc, #160]	; (800288c <TIM_Base_SetConfig+0xf8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d013      	beq.n	8002816 <TIM_Base_SetConfig+0x82>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a27      	ldr	r2, [pc, #156]	; (8002890 <TIM_Base_SetConfig+0xfc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00f      	beq.n	8002816 <TIM_Base_SetConfig+0x82>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027fc:	d00b      	beq.n	8002816 <TIM_Base_SetConfig+0x82>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a24      	ldr	r2, [pc, #144]	; (8002894 <TIM_Base_SetConfig+0x100>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d007      	beq.n	8002816 <TIM_Base_SetConfig+0x82>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a23      	ldr	r2, [pc, #140]	; (8002898 <TIM_Base_SetConfig+0x104>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d003      	beq.n	8002816 <TIM_Base_SetConfig+0x82>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a22      	ldr	r2, [pc, #136]	; (800289c <TIM_Base_SetConfig+0x108>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d108      	bne.n	8002828 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800281c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4313      	orrs	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	4313      	orrs	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a0f      	ldr	r2, [pc, #60]	; (800288c <TIM_Base_SetConfig+0xf8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d003      	beq.n	800285c <TIM_Base_SetConfig+0xc8>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a0e      	ldr	r2, [pc, #56]	; (8002890 <TIM_Base_SetConfig+0xfc>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d103      	bne.n	8002864 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d005      	beq.n	8002882 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f023 0201 	bic.w	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	611a      	str	r2, [r3, #16]
  }
}
 8002882:	bf00      	nop
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr
 800288c:	40012c00 	.word	0x40012c00
 8002890:	40013400 	.word	0x40013400
 8002894:	40000400 	.word	0x40000400
 8002898:	40000800 	.word	0x40000800
 800289c:	40000c00 	.word	0x40000c00

080028a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f023 0201 	bic.w	r2, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f023 0303 	bic.w	r3, r3, #3
 80028d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f023 0302 	bic.w	r3, r3, #2
 80028e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a20      	ldr	r2, [pc, #128]	; (8002978 <TIM_OC1_SetConfig+0xd8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d003      	beq.n	8002904 <TIM_OC1_SetConfig+0x64>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a1f      	ldr	r2, [pc, #124]	; (800297c <TIM_OC1_SetConfig+0xdc>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d10c      	bne.n	800291e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f023 0308 	bic.w	r3, r3, #8
 800290a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	4313      	orrs	r3, r2
 8002914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f023 0304 	bic.w	r3, r3, #4
 800291c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a15      	ldr	r2, [pc, #84]	; (8002978 <TIM_OC1_SetConfig+0xd8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d003      	beq.n	800292e <TIM_OC1_SetConfig+0x8e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a14      	ldr	r2, [pc, #80]	; (800297c <TIM_OC1_SetConfig+0xdc>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d111      	bne.n	8002952 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800293c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	621a      	str	r2, [r3, #32]
}
 800296c:	bf00      	nop
 800296e:	371c      	adds	r7, #28
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40012c00 	.word	0x40012c00
 800297c:	40013400 	.word	0x40013400

08002980 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f023 0210 	bic.w	r2, r3, #16
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f023 0320 	bic.w	r3, r3, #32
 80029ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a21      	ldr	r2, [pc, #132]	; (8002a60 <TIM_OC2_SetConfig+0xe0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d003      	beq.n	80029e8 <TIM_OC2_SetConfig+0x68>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a20      	ldr	r2, [pc, #128]	; (8002a64 <TIM_OC2_SetConfig+0xe4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d10d      	bne.n	8002a04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a16      	ldr	r2, [pc, #88]	; (8002a60 <TIM_OC2_SetConfig+0xe0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d003      	beq.n	8002a14 <TIM_OC2_SetConfig+0x94>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a15      	ldr	r2, [pc, #84]	; (8002a64 <TIM_OC2_SetConfig+0xe4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d113      	bne.n	8002a3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	621a      	str	r2, [r3, #32]
}
 8002a56:	bf00      	nop
 8002a58:	371c      	adds	r7, #28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr
 8002a60:	40012c00 	.word	0x40012c00
 8002a64:	40013400 	.word	0x40013400

08002a68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f023 0303 	bic.w	r3, r3, #3
 8002a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	021b      	lsls	r3, r3, #8
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a21      	ldr	r2, [pc, #132]	; (8002b48 <TIM_OC3_SetConfig+0xe0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d003      	beq.n	8002ace <TIM_OC3_SetConfig+0x66>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a20      	ldr	r2, [pc, #128]	; (8002b4c <TIM_OC3_SetConfig+0xe4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d10d      	bne.n	8002aea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ad4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	021b      	lsls	r3, r3, #8
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a16      	ldr	r2, [pc, #88]	; (8002b48 <TIM_OC3_SetConfig+0xe0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d003      	beq.n	8002afa <TIM_OC3_SetConfig+0x92>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a15      	ldr	r2, [pc, #84]	; (8002b4c <TIM_OC3_SetConfig+0xe4>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d113      	bne.n	8002b22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	621a      	str	r2, [r3, #32]
}
 8002b3c:	bf00      	nop
 8002b3e:	371c      	adds	r7, #28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40012c00 	.word	0x40012c00
 8002b4c:	40013400 	.word	0x40013400

08002b50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	021b      	lsls	r3, r3, #8
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	031b      	lsls	r3, r3, #12
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a11      	ldr	r2, [pc, #68]	; (8002bf0 <TIM_OC4_SetConfig+0xa0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d003      	beq.n	8002bb8 <TIM_OC4_SetConfig+0x68>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a10      	ldr	r2, [pc, #64]	; (8002bf4 <TIM_OC4_SetConfig+0xa4>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d109      	bne.n	8002bcc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	019b      	lsls	r3, r3, #6
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	621a      	str	r2, [r3, #32]
}
 8002be6:	bf00      	nop
 8002be8:	371c      	adds	r7, #28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr
 8002bf0:	40012c00 	.word	0x40012c00
 8002bf4:	40013400 	.word	0x40013400

08002bf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	f023 0201 	bic.w	r2, r3, #1
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f023 030a 	bic.w	r3, r3, #10
 8002c34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	621a      	str	r2, [r3, #32]
}
 8002c4a:	bf00      	nop
 8002c4c:	371c      	adds	r7, #28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	f023 0210 	bic.w	r2, r3, #16
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	031b      	lsls	r3, r3, #12
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c90:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	621a      	str	r2, [r3, #32]
}
 8002ca8:	bf00      	nop
 8002caa:	371c      	adds	r7, #28
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f043 0307 	orr.w	r3, r3, #7
 8002cd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	609a      	str	r2, [r3, #8]
}
 8002cdc:	bf00      	nop
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr

08002ce6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b087      	sub	sp, #28
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d00:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	021a      	lsls	r2, r3, #8
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	609a      	str	r2, [r3, #8]
}
 8002d1a:	bf00      	nop
 8002d1c:	371c      	adds	r7, #28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b087      	sub	sp, #28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	2201      	movs	r2, #1
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a1a      	ldr	r2, [r3, #32]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	401a      	ands	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a1a      	ldr	r2, [r3, #32]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f003 031f 	and.w	r3, r3, #31
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	621a      	str	r2, [r3, #32]
}
 8002d62:	bf00      	nop
 8002d64:	371c      	adds	r7, #28
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr

08002d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e050      	b.n	8002e26 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002daa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a1b      	ldr	r2, [pc, #108]	; (8002e30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d018      	beq.n	8002dfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a19      	ldr	r2, [pc, #100]	; (8002e34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dda:	d00e      	beq.n	8002dfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a15      	ldr	r2, [pc, #84]	; (8002e38 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d009      	beq.n	8002dfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a14      	ldr	r2, [pc, #80]	; (8002e3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d004      	beq.n	8002dfa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a12      	ldr	r2, [pc, #72]	; (8002e40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d10c      	bne.n	8002e14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bc80      	pop	{r7}
 8002e2e:	4770      	bx	lr
 8002e30:	40012c00 	.word	0x40012c00
 8002e34:	40013400 	.word	0x40013400
 8002e38:	40000400 	.word	0x40000400
 8002e3c:	40000800 	.word	0x40000800
 8002e40:	40000c00 	.word	0x40000c00

08002e44 <memset>:
 8002e44:	4603      	mov	r3, r0
 8002e46:	4402      	add	r2, r0
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d100      	bne.n	8002e4e <memset+0xa>
 8002e4c:	4770      	bx	lr
 8002e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e52:	e7f9      	b.n	8002e48 <memset+0x4>

08002e54 <__libc_init_array>:
 8002e54:	b570      	push	{r4, r5, r6, lr}
 8002e56:	2600      	movs	r6, #0
 8002e58:	4d0c      	ldr	r5, [pc, #48]	; (8002e8c <__libc_init_array+0x38>)
 8002e5a:	4c0d      	ldr	r4, [pc, #52]	; (8002e90 <__libc_init_array+0x3c>)
 8002e5c:	1b64      	subs	r4, r4, r5
 8002e5e:	10a4      	asrs	r4, r4, #2
 8002e60:	42a6      	cmp	r6, r4
 8002e62:	d109      	bne.n	8002e78 <__libc_init_array+0x24>
 8002e64:	f000 f81a 	bl	8002e9c <_init>
 8002e68:	2600      	movs	r6, #0
 8002e6a:	4d0a      	ldr	r5, [pc, #40]	; (8002e94 <__libc_init_array+0x40>)
 8002e6c:	4c0a      	ldr	r4, [pc, #40]	; (8002e98 <__libc_init_array+0x44>)
 8002e6e:	1b64      	subs	r4, r4, r5
 8002e70:	10a4      	asrs	r4, r4, #2
 8002e72:	42a6      	cmp	r6, r4
 8002e74:	d105      	bne.n	8002e82 <__libc_init_array+0x2e>
 8002e76:	bd70      	pop	{r4, r5, r6, pc}
 8002e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e7c:	4798      	blx	r3
 8002e7e:	3601      	adds	r6, #1
 8002e80:	e7ee      	b.n	8002e60 <__libc_init_array+0xc>
 8002e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e86:	4798      	blx	r3
 8002e88:	3601      	adds	r6, #1
 8002e8a:	e7f2      	b.n	8002e72 <__libc_init_array+0x1e>
 8002e8c:	080034d8 	.word	0x080034d8
 8002e90:	080034d8 	.word	0x080034d8
 8002e94:	080034d8 	.word	0x080034d8
 8002e98:	080034dc 	.word	0x080034dc

08002e9c <_init>:
 8002e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9e:	bf00      	nop
 8002ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ea2:	bc08      	pop	{r3}
 8002ea4:	469e      	mov	lr, r3
 8002ea6:	4770      	bx	lr

08002ea8 <_fini>:
 8002ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eaa:	bf00      	nop
 8002eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eae:	bc08      	pop	{r3}
 8002eb0:	469e      	mov	lr, r3
 8002eb2:	4770      	bx	lr

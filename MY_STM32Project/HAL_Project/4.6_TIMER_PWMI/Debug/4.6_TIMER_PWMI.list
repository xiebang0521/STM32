
4.6_TIMER_PWMI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035d8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  080037bc  080037bc  000137bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003df4  08003df4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003df4  08003df4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003df4  08003df4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003df4  08003df4  00013df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003df8  08003df8  00013df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08003e08  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003e08  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b0f6  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d18  00000000  00000000  0002b16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  0002ce88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e8  00000000  00000000  0002db38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000191d4  00000000  00000000  0002e520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f85a  00000000  00000000  000476f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094dd0  00000000  00000000  00056f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034b8  00000000  00000000  000ebd20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000ef1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080037a4 	.word	0x080037a4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080037a4 	.word	0x080037a4

08000224 <OLED_WriteCommand>:
  * @brief  OLED写命令
  * @param  Command 要写入的命令
  * @retval 无
  */
void OLED_WriteCommand(uint8_t Command)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af02      	add	r7, sp, #8
 800022a:	4603      	mov	r3, r0
 800022c:	71fb      	strb	r3, [r7, #7]
	uint8_t I2C_Send_Buf[2] = {0x00, Command};
 800022e:	2300      	movs	r3, #0
 8000230:	733b      	strb	r3, [r7, #12]
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,0x78,I2C_Send_Buf,2,100);
 8000236:	f107 020c 	add.w	r2, r7, #12
 800023a:	2364      	movs	r3, #100	; 0x64
 800023c:	9300      	str	r3, [sp, #0]
 800023e:	2302      	movs	r3, #2
 8000240:	2178      	movs	r1, #120	; 0x78
 8000242:	4803      	ldr	r0, [pc, #12]	; (8000250 <OLED_WriteCommand+0x2c>)
 8000244:	f001 f93a 	bl	80014bc <HAL_I2C_Master_Transmit>
//	OLED_I2C_Start();
//	OLED_I2C_SendByte(0x78);		//从机地址
//	OLED_I2C_SendByte(0x00);		//写命令
//	OLED_I2C_SendByte(Command);
//	OLED_I2C_Stop();
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000028 	.word	0x20000028

08000254 <OLED_WriteData>:
  * @brief  OLED写数据
  * @param  Data 要写入的数据
  * @retval 无
  */
void OLED_WriteData(uint8_t Data)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b086      	sub	sp, #24
 8000258:	af02      	add	r7, sp, #8
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
	uint8_t I2C_Send_Buf[2] = {0x40, Data};
 800025e:	2340      	movs	r3, #64	; 0x40
 8000260:	733b      	strb	r3, [r7, #12]
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,0x78,I2C_Send_Buf,2,100);
 8000266:	f107 020c 	add.w	r2, r7, #12
 800026a:	2364      	movs	r3, #100	; 0x64
 800026c:	9300      	str	r3, [sp, #0]
 800026e:	2302      	movs	r3, #2
 8000270:	2178      	movs	r1, #120	; 0x78
 8000272:	4803      	ldr	r0, [pc, #12]	; (8000280 <OLED_WriteData+0x2c>)
 8000274:	f001 f922 	bl	80014bc <HAL_I2C_Master_Transmit>
//	OLED_I2C_Start();
//	OLED_I2C_SendByte(0x78);		//从机地址
//	OLED_I2C_SendByte(0x40);		//写数据
//	OLED_I2C_SendByte(Data);
//	OLED_I2C_Stop();
}
 8000278:	bf00      	nop
 800027a:	3710      	adds	r7, #16
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20000028 	.word	0x20000028

08000284 <OLED_SetCursor>:
  * @param  Y 以左上角为原点，向下方向的坐标，范围：0~7
  * @param  X 以左上角为原点，向右方向的坐标，范围：0~127
  * @retval 无
  */
void OLED_SetCursor(uint8_t Y, uint8_t X)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	4603      	mov	r3, r0
 800028c:	460a      	mov	r2, r1
 800028e:	71fb      	strb	r3, [r7, #7]
 8000290:	4613      	mov	r3, r2
 8000292:	71bb      	strb	r3, [r7, #6]
	OLED_WriteCommand(0xB0 | Y);					//设置Y位置
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800029a:	b2db      	uxtb	r3, r3
 800029c:	4618      	mov	r0, r3
 800029e:	f7ff ffc1 	bl	8000224 <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置高4位
 80002a2:	79bb      	ldrb	r3, [r7, #6]
 80002a4:	091b      	lsrs	r3, r3, #4
 80002a6:	b2db      	uxtb	r3, r3
 80002a8:	f043 0310 	orr.w	r3, r3, #16
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	4618      	mov	r0, r3
 80002b0:	f7ff ffb8 	bl	8000224 <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置低4位
 80002b4:	79bb      	ldrb	r3, [r7, #6]
 80002b6:	f003 030f 	and.w	r3, r3, #15
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	4618      	mov	r0, r3
 80002be:	f7ff ffb1 	bl	8000224 <OLED_WriteCommand>
}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}

080002ca <OLED_Clear>:
  * @brief  OLED清屏
  * @param  无
  * @retval 无
  */
void OLED_Clear(void)
{  
 80002ca:	b580      	push	{r7, lr}
 80002cc:	b082      	sub	sp, #8
 80002ce:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 80002d0:	2300      	movs	r3, #0
 80002d2:	71bb      	strb	r3, [r7, #6]
 80002d4:	e014      	b.n	8000300 <OLED_Clear+0x36>
	{
		OLED_SetCursor(j, 0);
 80002d6:	79bb      	ldrb	r3, [r7, #6]
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f7ff ffd2 	bl	8000284 <OLED_SetCursor>
		for(i = 0; i < 128; i++)
 80002e0:	2300      	movs	r3, #0
 80002e2:	71fb      	strb	r3, [r7, #7]
 80002e4:	e005      	b.n	80002f2 <OLED_Clear+0x28>
		{
			OLED_WriteData(0x00);
 80002e6:	2000      	movs	r0, #0
 80002e8:	f7ff ffb4 	bl	8000254 <OLED_WriteData>
		for(i = 0; i < 128; i++)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	3301      	adds	r3, #1
 80002f0:	71fb      	strb	r3, [r7, #7]
 80002f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	daf5      	bge.n	80002e6 <OLED_Clear+0x1c>
	for (j = 0; j < 8; j++)
 80002fa:	79bb      	ldrb	r3, [r7, #6]
 80002fc:	3301      	adds	r3, #1
 80002fe:	71bb      	strb	r3, [r7, #6]
 8000300:	79bb      	ldrb	r3, [r7, #6]
 8000302:	2b07      	cmp	r3, #7
 8000304:	d9e7      	bls.n	80002d6 <OLED_Clear+0xc>
		}
	}
}
 8000306:	bf00      	nop
 8000308:	bf00      	nop
 800030a:	3708      	adds	r7, #8
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <OLED_ShowChar>:
  * @param  Column 列位置，范围：1~16
  * @param  Char 要显示的一个字符，范围：ASCII可见字符
  * @retval 无
  */
void OLED_ShowChar(uint8_t Line, uint8_t Column, char Char)
{      	
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
 800031a:	460b      	mov	r3, r1
 800031c:	71bb      	strb	r3, [r7, #6]
 800031e:	4613      	mov	r3, r2
 8000320:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8);		//设置光标位置在上半部分
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	3b01      	subs	r3, #1
 8000326:	b2db      	uxtb	r3, r3
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	b2da      	uxtb	r2, r3
 800032c:	79bb      	ldrb	r3, [r7, #6]
 800032e:	3b01      	subs	r3, #1
 8000330:	b2db      	uxtb	r3, r3
 8000332:	00db      	lsls	r3, r3, #3
 8000334:	b2db      	uxtb	r3, r3
 8000336:	4619      	mov	r1, r3
 8000338:	4610      	mov	r0, r2
 800033a:	f7ff ffa3 	bl	8000284 <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 800033e:	2300      	movs	r3, #0
 8000340:	73fb      	strb	r3, [r7, #15]
 8000342:	e00e      	b.n	8000362 <OLED_ShowChar+0x52>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i]);			//显示上半部分内容
 8000344:	797b      	ldrb	r3, [r7, #5]
 8000346:	f1a3 0220 	sub.w	r2, r3, #32
 800034a:	7bfb      	ldrb	r3, [r7, #15]
 800034c:	491c      	ldr	r1, [pc, #112]	; (80003c0 <OLED_ShowChar+0xb0>)
 800034e:	0112      	lsls	r2, r2, #4
 8000350:	440a      	add	r2, r1
 8000352:	4413      	add	r3, r2
 8000354:	781b      	ldrb	r3, [r3, #0]
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff ff7c 	bl	8000254 <OLED_WriteData>
	for (i = 0; i < 8; i++)
 800035c:	7bfb      	ldrb	r3, [r7, #15]
 800035e:	3301      	adds	r3, #1
 8000360:	73fb      	strb	r3, [r7, #15]
 8000362:	7bfb      	ldrb	r3, [r7, #15]
 8000364:	2b07      	cmp	r3, #7
 8000366:	d9ed      	bls.n	8000344 <OLED_ShowChar+0x34>
	}
	OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8);	//设置光标位置在下半部分
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	3b01      	subs	r3, #1
 800036c:	b2db      	uxtb	r3, r3
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	b2db      	uxtb	r3, r3
 8000372:	3301      	adds	r3, #1
 8000374:	b2da      	uxtb	r2, r3
 8000376:	79bb      	ldrb	r3, [r7, #6]
 8000378:	3b01      	subs	r3, #1
 800037a:	b2db      	uxtb	r3, r3
 800037c:	00db      	lsls	r3, r3, #3
 800037e:	b2db      	uxtb	r3, r3
 8000380:	4619      	mov	r1, r3
 8000382:	4610      	mov	r0, r2
 8000384:	f7ff ff7e 	bl	8000284 <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 8000388:	2300      	movs	r3, #0
 800038a:	73fb      	strb	r3, [r7, #15]
 800038c:	e00f      	b.n	80003ae <OLED_ShowChar+0x9e>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i + 8]);		//显示下半部分内容
 800038e:	797b      	ldrb	r3, [r7, #5]
 8000390:	f1a3 0220 	sub.w	r2, r3, #32
 8000394:	7bfb      	ldrb	r3, [r7, #15]
 8000396:	3308      	adds	r3, #8
 8000398:	4909      	ldr	r1, [pc, #36]	; (80003c0 <OLED_ShowChar+0xb0>)
 800039a:	0112      	lsls	r2, r2, #4
 800039c:	440a      	add	r2, r1
 800039e:	4413      	add	r3, r2
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff ff56 	bl	8000254 <OLED_WriteData>
	for (i = 0; i < 8; i++)
 80003a8:	7bfb      	ldrb	r3, [r7, #15]
 80003aa:	3301      	adds	r3, #1
 80003ac:	73fb      	strb	r3, [r7, #15]
 80003ae:	7bfb      	ldrb	r3, [r7, #15]
 80003b0:	2b07      	cmp	r3, #7
 80003b2:	d9ec      	bls.n	800038e <OLED_ShowChar+0x7e>
	}
}
 80003b4:	bf00      	nop
 80003b6:	bf00      	nop
 80003b8:	3710      	adds	r7, #16
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	080037d8 	.word	0x080037d8

080003c4 <OLED_ShowString>:
  * @param  Column 起始列位置，范围：1~16
  * @param  String 要显示的字符串，范围：ASCII可见字符
  * @retval 无
  */
void OLED_ShowString(uint8_t Line, uint8_t Column, char *String)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	603a      	str	r2, [r7, #0]
 80003ce:	71fb      	strb	r3, [r7, #7]
 80003d0:	460b      	mov	r3, r1
 80003d2:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	for (i = 0; String[i] != '\0'; i++)
 80003d4:	2300      	movs	r3, #0
 80003d6:	73fb      	strb	r3, [r7, #15]
 80003d8:	e00e      	b.n	80003f8 <OLED_ShowString+0x34>
	{
		OLED_ShowChar(Line, Column + i, String[i]);
 80003da:	79ba      	ldrb	r2, [r7, #6]
 80003dc:	7bfb      	ldrb	r3, [r7, #15]
 80003de:	4413      	add	r3, r2
 80003e0:	b2d9      	uxtb	r1, r3
 80003e2:	7bfb      	ldrb	r3, [r7, #15]
 80003e4:	683a      	ldr	r2, [r7, #0]
 80003e6:	4413      	add	r3, r2
 80003e8:	781a      	ldrb	r2, [r3, #0]
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff ff8f 	bl	8000310 <OLED_ShowChar>
	for (i = 0; String[i] != '\0'; i++)
 80003f2:	7bfb      	ldrb	r3, [r7, #15]
 80003f4:	3301      	adds	r3, #1
 80003f6:	73fb      	strb	r3, [r7, #15]
 80003f8:	7bfb      	ldrb	r3, [r7, #15]
 80003fa:	683a      	ldr	r2, [r7, #0]
 80003fc:	4413      	add	r3, r2
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d1ea      	bne.n	80003da <OLED_ShowString+0x16>
	}
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop
 8000408:	3710      	adds	r7, #16
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}

0800040e <OLED_Pow>:
/**
  * @brief  OLED次方函数
  * @retval 返回值等于X的Y次方
  */
uint32_t OLED_Pow(uint32_t X, uint32_t Y)
{
 800040e:	b480      	push	{r7}
 8000410:	b085      	sub	sp, #20
 8000412:	af00      	add	r7, sp, #0
 8000414:	6078      	str	r0, [r7, #4]
 8000416:	6039      	str	r1, [r7, #0]
	uint32_t Result = 1;
 8000418:	2301      	movs	r3, #1
 800041a:	60fb      	str	r3, [r7, #12]
	while (Y--)
 800041c:	e004      	b.n	8000428 <OLED_Pow+0x1a>
	{
		Result *= X;
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	687a      	ldr	r2, [r7, #4]
 8000422:	fb02 f303 	mul.w	r3, r2, r3
 8000426:	60fb      	str	r3, [r7, #12]
	while (Y--)
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	1e5a      	subs	r2, r3, #1
 800042c:	603a      	str	r2, [r7, #0]
 800042e:	2b00      	cmp	r3, #0
 8000430:	d1f5      	bne.n	800041e <OLED_Pow+0x10>
	}
	return Result;
 8000432:	68fb      	ldr	r3, [r7, #12]
}
 8000434:	4618      	mov	r0, r3
 8000436:	3714      	adds	r7, #20
 8000438:	46bd      	mov	sp, r7
 800043a:	bc80      	pop	{r7}
 800043c:	4770      	bx	lr
	...

08000440 <OLED_ShowNum>:
  * @param  Number 要显示的数字，范围：0~4294967295
  * @param  Length 要显示数字的长度，范围：1~10
  * @retval 无
  */
void OLED_ShowNum(uint8_t Line, uint8_t Column, uint32_t Number, uint8_t Length)
{
 8000440:	b590      	push	{r4, r7, lr}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	603a      	str	r2, [r7, #0]
 8000448:	461a      	mov	r2, r3
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
 800044e:	460b      	mov	r3, r1
 8000450:	71bb      	strb	r3, [r7, #6]
 8000452:	4613      	mov	r3, r2
 8000454:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	for (i = 0; i < Length; i++)							
 8000456:	2300      	movs	r3, #0
 8000458:	73fb      	strb	r3, [r7, #15]
 800045a:	e023      	b.n	80004a4 <OLED_ShowNum+0x64>
	{
		OLED_ShowChar(Line, Column + i, Number / OLED_Pow(10, Length - i - 1) % 10 + '0');
 800045c:	79ba      	ldrb	r2, [r7, #6]
 800045e:	7bfb      	ldrb	r3, [r7, #15]
 8000460:	4413      	add	r3, r2
 8000462:	b2dc      	uxtb	r4, r3
 8000464:	797a      	ldrb	r2, [r7, #5]
 8000466:	7bfb      	ldrb	r3, [r7, #15]
 8000468:	1ad3      	subs	r3, r2, r3
 800046a:	3b01      	subs	r3, #1
 800046c:	4619      	mov	r1, r3
 800046e:	200a      	movs	r0, #10
 8000470:	f7ff ffcd 	bl	800040e <OLED_Pow>
 8000474:	4602      	mov	r2, r0
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	fbb3 f1f2 	udiv	r1, r3, r2
 800047c:	4b0e      	ldr	r3, [pc, #56]	; (80004b8 <OLED_ShowNum+0x78>)
 800047e:	fba3 2301 	umull	r2, r3, r3, r1
 8000482:	08da      	lsrs	r2, r3, #3
 8000484:	4613      	mov	r3, r2
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	4413      	add	r3, r2
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	1aca      	subs	r2, r1, r3
 800048e:	b2d3      	uxtb	r3, r2
 8000490:	3330      	adds	r3, #48	; 0x30
 8000492:	b2da      	uxtb	r2, r3
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	4621      	mov	r1, r4
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff ff39 	bl	8000310 <OLED_ShowChar>
	for (i = 0; i < Length; i++)							
 800049e:	7bfb      	ldrb	r3, [r7, #15]
 80004a0:	3301      	adds	r3, #1
 80004a2:	73fb      	strb	r3, [r7, #15]
 80004a4:	7bfa      	ldrb	r2, [r7, #15]
 80004a6:	797b      	ldrb	r3, [r7, #5]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d3d7      	bcc.n	800045c <OLED_ShowNum+0x1c>
	}
}
 80004ac:	bf00      	nop
 80004ae:	bf00      	nop
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd90      	pop	{r4, r7, pc}
 80004b6:	bf00      	nop
 80004b8:	cccccccd 	.word	0xcccccccd

080004bc <OLED_Init>:
  * @brief  OLED初始化
  * @param  无
  * @retval 无
  */
void OLED_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
	uint32_t i, j;
	
	for (i = 0; i < 1000; i++)			//上电延时
 80004c2:	2300      	movs	r3, #0
 80004c4:	607b      	str	r3, [r7, #4]
 80004c6:	e00c      	b.n	80004e2 <OLED_Init+0x26>
	{
		for (j = 0; j < 1000; j++);
 80004c8:	2300      	movs	r3, #0
 80004ca:	603b      	str	r3, [r7, #0]
 80004cc:	e002      	b.n	80004d4 <OLED_Init+0x18>
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	3301      	adds	r3, #1
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004da:	d3f8      	bcc.n	80004ce <OLED_Init+0x12>
	for (i = 0; i < 1000; i++)			//上电延时
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	3301      	adds	r3, #1
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004e8:	d3ee      	bcc.n	80004c8 <OLED_Init+0xc>
	}

	OLED_WriteCommand(0xAE);	//关闭显示
 80004ea:	20ae      	movs	r0, #174	; 0xae
 80004ec:	f7ff fe9a 	bl	8000224 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 80004f0:	20d5      	movs	r0, #213	; 0xd5
 80004f2:	f7ff fe97 	bl	8000224 <OLED_WriteCommand>
	OLED_WriteCommand(0x80);
 80004f6:	2080      	movs	r0, #128	; 0x80
 80004f8:	f7ff fe94 	bl	8000224 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA8);	//设置多路复用率
 80004fc:	20a8      	movs	r0, #168	; 0xa8
 80004fe:	f7ff fe91 	bl	8000224 <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 8000502:	203f      	movs	r0, #63	; 0x3f
 8000504:	f7ff fe8e 	bl	8000224 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xD3);	//设置显示偏移
 8000508:	20d3      	movs	r0, #211	; 0xd3
 800050a:	f7ff fe8b 	bl	8000224 <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 800050e:	2000      	movs	r0, #0
 8000510:	f7ff fe88 	bl	8000224 <OLED_WriteCommand>
	
	OLED_WriteCommand(0x40);	//设置显示开始行
 8000514:	2040      	movs	r0, #64	; 0x40
 8000516:	f7ff fe85 	bl	8000224 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常 0xA0左右反置
 800051a:	20a1      	movs	r0, #161	; 0xa1
 800051c:	f7ff fe82 	bl	8000224 <OLED_WriteCommand>
	
	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常 0xC0上下反置
 8000520:	20c8      	movs	r0, #200	; 0xc8
 8000522:	f7ff fe7f 	bl	8000224 <OLED_WriteCommand>

	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 8000526:	20da      	movs	r0, #218	; 0xda
 8000528:	f7ff fe7c 	bl	8000224 <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 800052c:	2012      	movs	r0, #18
 800052e:	f7ff fe79 	bl	8000224 <OLED_WriteCommand>
	
	OLED_WriteCommand(0x81);	//设置对比度控制
 8000532:	2081      	movs	r0, #129	; 0x81
 8000534:	f7ff fe76 	bl	8000224 <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);
 8000538:	20cf      	movs	r0, #207	; 0xcf
 800053a:	f7ff fe73 	bl	8000224 <OLED_WriteCommand>

	OLED_WriteCommand(0xD9);	//设置预充电周期
 800053e:	20d9      	movs	r0, #217	; 0xd9
 8000540:	f7ff fe70 	bl	8000224 <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 8000544:	20f1      	movs	r0, #241	; 0xf1
 8000546:	f7ff fe6d 	bl	8000224 <OLED_WriteCommand>

	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 800054a:	20db      	movs	r0, #219	; 0xdb
 800054c:	f7ff fe6a 	bl	8000224 <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 8000550:	2030      	movs	r0, #48	; 0x30
 8000552:	f7ff fe67 	bl	8000224 <OLED_WriteCommand>

	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 8000556:	20a4      	movs	r0, #164	; 0xa4
 8000558:	f7ff fe64 	bl	8000224 <OLED_WriteCommand>

	OLED_WriteCommand(0xA6);	//设置正常/倒转显示
 800055c:	20a6      	movs	r0, #166	; 0xa6
 800055e:	f7ff fe61 	bl	8000224 <OLED_WriteCommand>

	OLED_WriteCommand(0x8D);	//设置充电泵
 8000562:	208d      	movs	r0, #141	; 0x8d
 8000564:	f7ff fe5e 	bl	8000224 <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 8000568:	2014      	movs	r0, #20
 800056a:	f7ff fe5b 	bl	8000224 <OLED_WriteCommand>

	OLED_WriteCommand(0xAF);	//开启显示
 800056e:	20af      	movs	r0, #175	; 0xaf
 8000570:	f7ff fe58 	bl	8000224 <OLED_WriteCommand>
		
	OLED_Clear();				//OLED清屏
 8000574:	f7ff fea9 	bl	80002ca <OLED_Clear>
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}

08000580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 0310 	add.w	r3, r7, #16
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000594:	4b1e      	ldr	r3, [pc, #120]	; (8000610 <MX_GPIO_Init+0x90>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a1d      	ldr	r2, [pc, #116]	; (8000610 <MX_GPIO_Init+0x90>)
 800059a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <MX_GPIO_Init+0x90>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ac:	4b18      	ldr	r3, [pc, #96]	; (8000610 <MX_GPIO_Init+0x90>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a17      	ldr	r2, [pc, #92]	; (8000610 <MX_GPIO_Init+0x90>)
 80005b2:	f043 0304 	orr.w	r3, r3, #4
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b15      	ldr	r3, [pc, #84]	; (8000610 <MX_GPIO_Init+0x90>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0304 	and.w	r3, r3, #4
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <MX_GPIO_Init+0x90>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a11      	ldr	r2, [pc, #68]	; (8000610 <MX_GPIO_Init+0x90>)
 80005ca:	f043 0308 	orr.w	r3, r3, #8
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_GPIO_Init+0x90>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0308 	and.w	r3, r3, #8
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, MORTO_IN1_Pin|MORTO_IN2_Pin, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 7140 	mov.w	r1, #768	; 0x300
 80005e2:	480c      	ldr	r0, [pc, #48]	; (8000614 <MX_GPIO_Init+0x94>)
 80005e4:	f000 fe0e 	bl	8001204 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = MORTO_IN1_Pin|MORTO_IN2_Pin;
 80005e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2302      	movs	r3, #2
 80005f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	4619      	mov	r1, r3
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <MX_GPIO_Init+0x94>)
 8000602:	f000 fc6b 	bl	8000edc <HAL_GPIO_Init>

}
 8000606:	bf00      	nop
 8000608:	3720      	adds	r7, #32
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000
 8000614:	40011c00 	.word	0x40011c00

08000618 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_I2C1_Init+0x50>)
 800061e:	4a13      	ldr	r2, [pc, #76]	; (800066c <MX_I2C1_Init+0x54>)
 8000620:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_I2C1_Init+0x50>)
 8000624:	4a12      	ldr	r2, [pc, #72]	; (8000670 <MX_I2C1_Init+0x58>)
 8000626:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_I2C1_Init+0x50>)
 8000636:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <MX_I2C1_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_I2C1_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000654:	4804      	ldr	r0, [pc, #16]	; (8000668 <MX_I2C1_Init+0x50>)
 8000656:	f000 fded 	bl	8001234 <HAL_I2C_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000660:	f000 f8db 	bl	800081a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000028 	.word	0x20000028
 800066c:	40005400 	.word	0x40005400
 8000670:	000186a0 	.word	0x000186a0

08000674 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	f107 0310 	add.w	r3, r7, #16
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a15      	ldr	r2, [pc, #84]	; (80006e4 <HAL_I2C_MspInit+0x70>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d123      	bne.n	80006dc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <HAL_I2C_MspInit+0x74>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a13      	ldr	r2, [pc, #76]	; (80006e8 <HAL_I2C_MspInit+0x74>)
 800069a:	f043 0308 	orr.w	r3, r3, #8
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <HAL_I2C_MspInit+0x74>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0308 	and.w	r3, r3, #8
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006ac:	23c0      	movs	r3, #192	; 0xc0
 80006ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006b0:	2312      	movs	r3, #18
 80006b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b4:	2303      	movs	r3, #3
 80006b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b8:	f107 0310 	add.w	r3, r7, #16
 80006bc:	4619      	mov	r1, r3
 80006be:	480b      	ldr	r0, [pc, #44]	; (80006ec <HAL_I2C_MspInit+0x78>)
 80006c0:	f000 fc0c 	bl	8000edc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <HAL_I2C_MspInit+0x74>)
 80006c6:	69db      	ldr	r3, [r3, #28]
 80006c8:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <HAL_I2C_MspInit+0x74>)
 80006ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006ce:	61d3      	str	r3, [r2, #28]
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <HAL_I2C_MspInit+0x74>)
 80006d2:	69db      	ldr	r3, [r3, #28]
 80006d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006dc:	bf00      	nop
 80006de:	3720      	adds	r7, #32
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40005400 	.word	0x40005400
 80006e8:	40021000 	.word	0x40021000
 80006ec:	40010c00 	.word	0x40010c00

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f4:	f000 faac 	bl	8000c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f8:	f000 f84a 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fc:	f7ff ff40 	bl	8000580 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000700:	f000 f8f0 	bl	80008e4 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000704:	f7ff ff88 	bl	8000618 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000708:	f000 f962 	bl	80009d0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800070c:	f7ff fed6 	bl	80004bc <OLED_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000710:	2108      	movs	r1, #8
 8000712:	481a      	ldr	r0, [pc, #104]	; (800077c <main+0x8c>)
 8000714:	f001 fece 	bl	80024b4 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);
 8000718:	2100      	movs	r1, #0
 800071a:	4819      	ldr	r0, [pc, #100]	; (8000780 <main+0x90>)
 800071c:	f001 ffdc 	bl	80026d8 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8000720:	2104      	movs	r1, #4
 8000722:	4817      	ldr	r0, [pc, #92]	; (8000780 <main+0x90>)
 8000724:	f001 ffd8 	bl	80026d8 <HAL_TIM_IC_Start>

  OLED_ShowString(1, 1,"Freq:00000Hz");
 8000728:	4a16      	ldr	r2, [pc, #88]	; (8000784 <main+0x94>)
 800072a:	2101      	movs	r1, #1
 800072c:	2001      	movs	r0, #1
 800072e:	f7ff fe49 	bl	80003c4 <OLED_ShowString>
  OLED_ShowString(2, 1,"Duty:00%");
 8000732:	4a15      	ldr	r2, [pc, #84]	; (8000788 <main+0x98>)
 8000734:	2101      	movs	r1, #1
 8000736:	2002      	movs	r0, #2
 8000738:	f7ff fe44 	bl	80003c4 <OLED_ShowString>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  OLED_ShowNum(1, 6, 1000000 /(__HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_1) + 1), 5);
 800073c:	4b10      	ldr	r3, [pc, #64]	; (8000780 <main+0x90>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000742:	3301      	adds	r3, #1
 8000744:	4a11      	ldr	r2, [pc, #68]	; (800078c <main+0x9c>)
 8000746:	fbb2 f2f3 	udiv	r2, r2, r3
 800074a:	2305      	movs	r3, #5
 800074c:	2106      	movs	r1, #6
 800074e:	2001      	movs	r0, #1
 8000750:	f7ff fe76 	bl	8000440 <OLED_ShowNum>
	  OLED_ShowNum(2, 6, (__HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_2) + 1) * 100/(__HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_1) + 1), 2);
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <main+0x90>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800075a:	3301      	adds	r3, #1
 800075c:	2264      	movs	r2, #100	; 0x64
 800075e:	fb03 f202 	mul.w	r2, r3, r2
 8000762:	4b07      	ldr	r3, [pc, #28]	; (8000780 <main+0x90>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000768:	3301      	adds	r3, #1
 800076a:	fbb2 f2f3 	udiv	r2, r2, r3
 800076e:	2302      	movs	r3, #2
 8000770:	2106      	movs	r1, #6
 8000772:	2002      	movs	r0, #2
 8000774:	f7ff fe64 	bl	8000440 <OLED_ShowNum>
	  OLED_ShowNum(1, 6, 1000000 /(__HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_1) + 1), 5);
 8000778:	e7e0      	b.n	800073c <main+0x4c>
 800077a:	bf00      	nop
 800077c:	2000007c 	.word	0x2000007c
 8000780:	200000c4 	.word	0x200000c4
 8000784:	080037bc 	.word	0x080037bc
 8000788:	080037cc 	.word	0x080037cc
 800078c:	000f4240 	.word	0x000f4240

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b090      	sub	sp, #64	; 0x40
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0318 	add.w	r3, r7, #24
 800079a:	2228      	movs	r2, #40	; 0x28
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 ffd4 	bl	800374c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c0:	2301      	movs	r3, #1
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c4:	2302      	movs	r3, #2
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d4:	f107 0318 	add.w	r3, r7, #24
 80007d8:	4618      	mov	r0, r3
 80007da:	f001 f9c7 	bl	8001b6c <HAL_RCC_OscConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007e4:	f000 f819 	bl	800081a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e8:	230f      	movs	r3, #15
 80007ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ec:	2302      	movs	r3, #2
 80007ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2102      	movs	r1, #2
 8000802:	4618      	mov	r0, r3
 8000804:	f001 fc34 	bl	8002070 <HAL_RCC_ClockConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800080e:	f000 f804 	bl	800081a <Error_Handler>
  }
}
 8000812:	bf00      	nop
 8000814:	3740      	adds	r7, #64	; 0x40
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081e:	b672      	cpsid	i
}
 8000820:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000822:	e7fe      	b.n	8000822 <Error_Handler+0x8>

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <HAL_MspInit+0x5c>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	4a14      	ldr	r2, [pc, #80]	; (8000880 <HAL_MspInit+0x5c>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6193      	str	r3, [r2, #24]
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_MspInit+0x5c>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <HAL_MspInit+0x5c>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <HAL_MspInit+0x5c>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	61d3      	str	r3, [r2, #28]
 800084e:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <HAL_MspInit+0x5c>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800085a:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <HAL_MspInit+0x60>)
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <HAL_MspInit+0x60>)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000876:	bf00      	nop
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	40021000 	.word	0x40021000
 8000884:	40010000 	.word	0x40010000

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800088c:	e7fe      	b.n	800088c <NMI_Handler+0x4>

0800088e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <HardFault_Handler+0x4>

08000894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <MemManage_Handler+0x4>

0800089a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <BusFault_Handler+0x4>

080008a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <UsageFault_Handler+0x4>

080008a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr

080008be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc80      	pop	{r7}
 80008c8:	4770      	bx	lr

080008ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ce:	f000 fa05 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
	...

080008e4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08e      	sub	sp, #56	; 0x38
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f8:	f107 0320 	add.w	r3, r7, #32
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
 8000910:	615a      	str	r2, [r3, #20]
 8000912:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000914:	4b2d      	ldr	r3, [pc, #180]	; (80009cc <MX_TIM2_Init+0xe8>)
 8000916:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800091a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 800091c:	4b2b      	ldr	r3, [pc, #172]	; (80009cc <MX_TIM2_Init+0xe8>)
 800091e:	2247      	movs	r2, #71	; 0x47
 8000920:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000922:	4b2a      	ldr	r3, [pc, #168]	; (80009cc <MX_TIM2_Init+0xe8>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 8000928:	4b28      	ldr	r3, [pc, #160]	; (80009cc <MX_TIM2_Init+0xe8>)
 800092a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800092e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000930:	4b26      	ldr	r3, [pc, #152]	; (80009cc <MX_TIM2_Init+0xe8>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <MX_TIM2_Init+0xe8>)
 8000938:	2280      	movs	r2, #128	; 0x80
 800093a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800093c:	4823      	ldr	r0, [pc, #140]	; (80009cc <MX_TIM2_Init+0xe8>)
 800093e:	f001 fd11 	bl	8002364 <HAL_TIM_Base_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000948:	f7ff ff67 	bl	800081a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000956:	4619      	mov	r1, r3
 8000958:	481c      	ldr	r0, [pc, #112]	; (80009cc <MX_TIM2_Init+0xe8>)
 800095a:	f002 f8e9 	bl	8002b30 <HAL_TIM_ConfigClockSource>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000964:	f7ff ff59 	bl	800081a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000968:	4818      	ldr	r0, [pc, #96]	; (80009cc <MX_TIM2_Init+0xe8>)
 800096a:	f001 fd4a 	bl	8002402 <HAL_TIM_PWM_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000974:	f7ff ff51 	bl	800081a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000980:	f107 0320 	add.w	r3, r7, #32
 8000984:	4619      	mov	r1, r3
 8000986:	4811      	ldr	r0, [pc, #68]	; (80009cc <MX_TIM2_Init+0xe8>)
 8000988:	f002 fe74 	bl	8003674 <HAL_TIMEx_MasterConfigSynchronization>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000992:	f7ff ff42 	bl	800081a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000996:	2360      	movs	r3, #96	; 0x60
 8000998:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2208      	movs	r2, #8
 80009aa:	4619      	mov	r1, r3
 80009ac:	4807      	ldr	r0, [pc, #28]	; (80009cc <MX_TIM2_Init+0xe8>)
 80009ae:	f001 fffd 	bl	80029ac <HAL_TIM_PWM_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80009b8:	f7ff ff2f 	bl	800081a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <MX_TIM2_Init+0xe8>)
 80009be:	f000 f8f1 	bl	8000ba4 <HAL_TIM_MspPostInit>

}
 80009c2:	bf00      	nop
 80009c4:	3738      	adds	r7, #56	; 0x38
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000007c 	.word	0x2000007c

080009d0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b090      	sub	sp, #64	; 0x40
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a0a:	4b3c      	ldr	r3, [pc, #240]	; (8000afc <MX_TIM3_Init+0x12c>)
 8000a0c:	4a3c      	ldr	r2, [pc, #240]	; (8000b00 <MX_TIM3_Init+0x130>)
 8000a0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72 - 1;
 8000a10:	4b3a      	ldr	r3, [pc, #232]	; (8000afc <MX_TIM3_Init+0x12c>)
 8000a12:	2247      	movs	r2, #71	; 0x47
 8000a14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a16:	4b39      	ldr	r3, [pc, #228]	; (8000afc <MX_TIM3_Init+0x12c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a1c:	4b37      	ldr	r3, [pc, #220]	; (8000afc <MX_TIM3_Init+0x12c>)
 8000a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a24:	4b35      	ldr	r3, [pc, #212]	; (8000afc <MX_TIM3_Init+0x12c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2a:	4b34      	ldr	r3, [pc, #208]	; (8000afc <MX_TIM3_Init+0x12c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a30:	4832      	ldr	r0, [pc, #200]	; (8000afc <MX_TIM3_Init+0x12c>)
 8000a32:	f001 fc97 	bl	8002364 <HAL_TIM_Base_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000a3c:	f7ff feed 	bl	800081a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a44:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	482b      	ldr	r0, [pc, #172]	; (8000afc <MX_TIM3_Init+0x12c>)
 8000a4e:	f002 f86f 	bl	8002b30 <HAL_TIM_ConfigClockSource>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a58:	f7ff fedf 	bl	800081a <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000a5c:	4827      	ldr	r0, [pc, #156]	; (8000afc <MX_TIM3_Init+0x12c>)
 8000a5e:	f001 fde3 	bl	8002628 <HAL_TIM_IC_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000a68:	f7ff fed7 	bl	800081a <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000a70:	2350      	movs	r3, #80	; 0x50
 8000a72:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	481e      	ldr	r0, [pc, #120]	; (8000afc <MX_TIM3_Init+0x12c>)
 8000a84:	f002 f91b 	bl	8002cbe <HAL_TIM_SlaveConfigSynchro>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 8000a8e:	f7ff fec4 	bl	800081a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4816      	ldr	r0, [pc, #88]	; (8000afc <MX_TIM3_Init+0x12c>)
 8000aa2:	f002 fde7 	bl	8003674 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000aac:	f7ff feb5 	bl	800081a <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480d      	ldr	r0, [pc, #52]	; (8000afc <MX_TIM3_Init+0x12c>)
 8000ac8:	f001 fed4 	bl	8002874 <HAL_TIM_IC_ConfigChannel>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8000ad2:	f7ff fea2 	bl	800081a <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000ada:	2302      	movs	r3, #2
 8000adc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2204      	movs	r2, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_TIM3_Init+0x12c>)
 8000ae6:	f001 fec5 	bl	8002874 <HAL_TIM_IC_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM3_Init+0x124>
  {
    Error_Handler();
 8000af0:	f7ff fe93 	bl	800081a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	3740      	adds	r7, #64	; 0x40
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200000c4 	.word	0x200000c4
 8000b00:	40000400 	.word	0x40000400

08000b04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0318 	add.w	r3, r7, #24
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b22:	d10c      	bne.n	8000b3e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b24:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <HAL_TIM_Base_MspInit+0x94>)
 8000b26:	69db      	ldr	r3, [r3, #28]
 8000b28:	4a1b      	ldr	r2, [pc, #108]	; (8000b98 <HAL_TIM_Base_MspInit+0x94>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	61d3      	str	r3, [r2, #28]
 8000b30:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <HAL_TIM_Base_MspInit+0x94>)
 8000b32:	69db      	ldr	r3, [r3, #28]
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000b3c:	e028      	b.n	8000b90 <HAL_TIM_Base_MspInit+0x8c>
  else if(tim_baseHandle->Instance==TIM3)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a16      	ldr	r2, [pc, #88]	; (8000b9c <HAL_TIM_Base_MspInit+0x98>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d123      	bne.n	8000b90 <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <HAL_TIM_Base_MspInit+0x94>)
 8000b4a:	69db      	ldr	r3, [r3, #28]
 8000b4c:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <HAL_TIM_Base_MspInit+0x94>)
 8000b4e:	f043 0302 	orr.w	r3, r3, #2
 8000b52:	61d3      	str	r3, [r2, #28]
 8000b54:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <HAL_TIM_Base_MspInit+0x94>)
 8000b56:	69db      	ldr	r3, [r3, #28]
 8000b58:	f003 0302 	and.w	r3, r3, #2
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <HAL_TIM_Base_MspInit+0x94>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a0c      	ldr	r2, [pc, #48]	; (8000b98 <HAL_TIM_Base_MspInit+0x94>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <HAL_TIM_Base_MspInit+0x94>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b78:	2340      	movs	r3, #64	; 0x40
 8000b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 0318 	add.w	r3, r7, #24
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <HAL_TIM_Base_MspInit+0x9c>)
 8000b8c:	f000 f9a6 	bl	8000edc <HAL_GPIO_Init>
}
 8000b90:	bf00      	nop
 8000b92:	3728      	adds	r7, #40	; 0x28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40000400 	.word	0x40000400
 8000ba0:	40010800 	.word	0x40010800

08000ba4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bc2:	d117      	bne.n	8000bf4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc4:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <HAL_TIM_MspPostInit+0x58>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a0c      	ldr	r2, [pc, #48]	; (8000bfc <HAL_TIM_MspPostInit+0x58>)
 8000bca:	f043 0304 	orr.w	r3, r3, #4
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <HAL_TIM_MspPostInit+0x58>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f003 0304 	and.w	r3, r3, #4
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bdc:	2304      	movs	r3, #4
 8000bde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	4619      	mov	r1, r3
 8000bee:	4804      	ldr	r0, [pc, #16]	; (8000c00 <HAL_TIM_MspPostInit+0x5c>)
 8000bf0:	f000 f974 	bl	8000edc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000bf4:	bf00      	nop
 8000bf6:	3720      	adds	r7, #32
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010800 	.word	0x40010800

08000c04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c04:	f7ff fe67 	bl	80008d6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c08:	480b      	ldr	r0, [pc, #44]	; (8000c38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c0a:	490c      	ldr	r1, [pc, #48]	; (8000c3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c0c:	4a0c      	ldr	r2, [pc, #48]	; (8000c40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a09      	ldr	r2, [pc, #36]	; (8000c44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c20:	4c09      	ldr	r4, [pc, #36]	; (8000c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f002 fd95 	bl	800375c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c32:	f7ff fd5d 	bl	80006f0 <main>
  bx lr
 8000c36:	4770      	bx	lr
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c40:	08003dfc 	.word	0x08003dfc
  ldr r2, =_sbss
 8000c44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c48:	20000110 	.word	0x20000110

08000c4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC1_2_IRQHandler>
	...

08000c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <HAL_Init+0x28>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <HAL_Init+0x28>)
 8000c5a:	f043 0310 	orr.w	r3, r3, #16
 8000c5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f000 f907 	bl	8000e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c66:	200f      	movs	r0, #15
 8000c68:	f000 f808 	bl	8000c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c6c:	f7ff fdda 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40022000 	.word	0x40022000

08000c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <HAL_InitTick+0x54>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_InitTick+0x58>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f911 	bl	8000ec2 <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00e      	b.n	8000cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d80a      	bhi.n	8000cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f000 f8e7 	bl	8000e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cbc:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <HAL_InitTick+0x5c>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <HAL_IncTick+0x1c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a03      	ldr	r2, [pc, #12]	; (8000cfc <HAL_IncTick+0x20>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	2000010c 	.word	0x2000010c

08000d00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b02      	ldr	r3, [pc, #8]	; (8000d10 <HAL_GetTick+0x10>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	2000010c 	.word	0x2000010c

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	db0a      	blt.n	8000da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	490c      	ldr	r1, [pc, #48]	; (8000dc4 <__NVIC_SetPriority+0x4c>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	0112      	lsls	r2, r2, #4
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da0:	e00a      	b.n	8000db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4908      	ldr	r1, [pc, #32]	; (8000dc8 <__NVIC_SetPriority+0x50>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	3b04      	subs	r3, #4
 8000db0:	0112      	lsls	r2, r2, #4
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	440b      	add	r3, r1
 8000db6:	761a      	strb	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000e100 	.word	0xe000e100
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	bf28      	it	cs
 8000dea:	2304      	movcs	r3, #4
 8000dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3304      	adds	r3, #4
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d902      	bls.n	8000dfc <NVIC_EncodePriority+0x30>
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3b03      	subs	r3, #3
 8000dfa:	e000      	b.n	8000dfe <NVIC_EncodePriority+0x32>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	43d9      	mvns	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	4313      	orrs	r3, r2
         );
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3724      	adds	r7, #36	; 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e40:	d301      	bcc.n	8000e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00f      	b.n	8000e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <SysTick_Config+0x40>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e4e:	210f      	movs	r1, #15
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f7ff ff90 	bl	8000d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <SysTick_Config+0x40>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5e:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <SysTick_Config+0x40>)
 8000e60:	2207      	movs	r2, #7
 8000e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	e000e010 	.word	0xe000e010

08000e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ff49 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b086      	sub	sp, #24
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9c:	f7ff ff5e 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	68b9      	ldr	r1, [r7, #8]
 8000ea6:	6978      	ldr	r0, [r7, #20]
 8000ea8:	f7ff ff90 	bl	8000dcc <NVIC_EncodePriority>
 8000eac:	4602      	mov	r2, r0
 8000eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff5f 	bl	8000d78 <__NVIC_SetPriority>
}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff ffb0 	bl	8000e30 <SysTick_Config>
 8000ed0:	4603      	mov	r3, r0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b08b      	sub	sp, #44	; 0x2c
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eee:	e179      	b.n	80011e4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	69fa      	ldr	r2, [r7, #28]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	f040 8168 	bne.w	80011de <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	4a96      	ldr	r2, [pc, #600]	; (800116c <HAL_GPIO_Init+0x290>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d05e      	beq.n	8000fd6 <HAL_GPIO_Init+0xfa>
 8000f18:	4a94      	ldr	r2, [pc, #592]	; (800116c <HAL_GPIO_Init+0x290>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d875      	bhi.n	800100a <HAL_GPIO_Init+0x12e>
 8000f1e:	4a94      	ldr	r2, [pc, #592]	; (8001170 <HAL_GPIO_Init+0x294>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d058      	beq.n	8000fd6 <HAL_GPIO_Init+0xfa>
 8000f24:	4a92      	ldr	r2, [pc, #584]	; (8001170 <HAL_GPIO_Init+0x294>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d86f      	bhi.n	800100a <HAL_GPIO_Init+0x12e>
 8000f2a:	4a92      	ldr	r2, [pc, #584]	; (8001174 <HAL_GPIO_Init+0x298>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d052      	beq.n	8000fd6 <HAL_GPIO_Init+0xfa>
 8000f30:	4a90      	ldr	r2, [pc, #576]	; (8001174 <HAL_GPIO_Init+0x298>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d869      	bhi.n	800100a <HAL_GPIO_Init+0x12e>
 8000f36:	4a90      	ldr	r2, [pc, #576]	; (8001178 <HAL_GPIO_Init+0x29c>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d04c      	beq.n	8000fd6 <HAL_GPIO_Init+0xfa>
 8000f3c:	4a8e      	ldr	r2, [pc, #568]	; (8001178 <HAL_GPIO_Init+0x29c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d863      	bhi.n	800100a <HAL_GPIO_Init+0x12e>
 8000f42:	4a8e      	ldr	r2, [pc, #568]	; (800117c <HAL_GPIO_Init+0x2a0>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d046      	beq.n	8000fd6 <HAL_GPIO_Init+0xfa>
 8000f48:	4a8c      	ldr	r2, [pc, #560]	; (800117c <HAL_GPIO_Init+0x2a0>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d85d      	bhi.n	800100a <HAL_GPIO_Init+0x12e>
 8000f4e:	2b12      	cmp	r3, #18
 8000f50:	d82a      	bhi.n	8000fa8 <HAL_GPIO_Init+0xcc>
 8000f52:	2b12      	cmp	r3, #18
 8000f54:	d859      	bhi.n	800100a <HAL_GPIO_Init+0x12e>
 8000f56:	a201      	add	r2, pc, #4	; (adr r2, 8000f5c <HAL_GPIO_Init+0x80>)
 8000f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5c:	08000fd7 	.word	0x08000fd7
 8000f60:	08000fb1 	.word	0x08000fb1
 8000f64:	08000fc3 	.word	0x08000fc3
 8000f68:	08001005 	.word	0x08001005
 8000f6c:	0800100b 	.word	0x0800100b
 8000f70:	0800100b 	.word	0x0800100b
 8000f74:	0800100b 	.word	0x0800100b
 8000f78:	0800100b 	.word	0x0800100b
 8000f7c:	0800100b 	.word	0x0800100b
 8000f80:	0800100b 	.word	0x0800100b
 8000f84:	0800100b 	.word	0x0800100b
 8000f88:	0800100b 	.word	0x0800100b
 8000f8c:	0800100b 	.word	0x0800100b
 8000f90:	0800100b 	.word	0x0800100b
 8000f94:	0800100b 	.word	0x0800100b
 8000f98:	0800100b 	.word	0x0800100b
 8000f9c:	0800100b 	.word	0x0800100b
 8000fa0:	08000fb9 	.word	0x08000fb9
 8000fa4:	08000fcd 	.word	0x08000fcd
 8000fa8:	4a75      	ldr	r2, [pc, #468]	; (8001180 <HAL_GPIO_Init+0x2a4>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d013      	beq.n	8000fd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fae:	e02c      	b.n	800100a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	623b      	str	r3, [r7, #32]
          break;
 8000fb6:	e029      	b.n	800100c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	623b      	str	r3, [r7, #32]
          break;
 8000fc0:	e024      	b.n	800100c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	3308      	adds	r3, #8
 8000fc8:	623b      	str	r3, [r7, #32]
          break;
 8000fca:	e01f      	b.n	800100c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	330c      	adds	r3, #12
 8000fd2:	623b      	str	r3, [r7, #32]
          break;
 8000fd4:	e01a      	b.n	800100c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d102      	bne.n	8000fe4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	623b      	str	r3, [r7, #32]
          break;
 8000fe2:	e013      	b.n	800100c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d105      	bne.n	8000ff8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fec:	2308      	movs	r3, #8
 8000fee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	611a      	str	r2, [r3, #16]
          break;
 8000ff6:	e009      	b.n	800100c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ff8:	2308      	movs	r3, #8
 8000ffa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	69fa      	ldr	r2, [r7, #28]
 8001000:	615a      	str	r2, [r3, #20]
          break;
 8001002:	e003      	b.n	800100c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
          break;
 8001008:	e000      	b.n	800100c <HAL_GPIO_Init+0x130>
          break;
 800100a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	2bff      	cmp	r3, #255	; 0xff
 8001010:	d801      	bhi.n	8001016 <HAL_GPIO_Init+0x13a>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	e001      	b.n	800101a <HAL_GPIO_Init+0x13e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3304      	adds	r3, #4
 800101a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	2bff      	cmp	r3, #255	; 0xff
 8001020:	d802      	bhi.n	8001028 <HAL_GPIO_Init+0x14c>
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	e002      	b.n	800102e <HAL_GPIO_Init+0x152>
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	3b08      	subs	r3, #8
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	210f      	movs	r1, #15
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	fa01 f303 	lsl.w	r3, r1, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	401a      	ands	r2, r3
 8001040:	6a39      	ldr	r1, [r7, #32]
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	fa01 f303 	lsl.w	r3, r1, r3
 8001048:	431a      	orrs	r2, r3
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 80c1 	beq.w	80011de <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800105c:	4b49      	ldr	r3, [pc, #292]	; (8001184 <HAL_GPIO_Init+0x2a8>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a48      	ldr	r2, [pc, #288]	; (8001184 <HAL_GPIO_Init+0x2a8>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b46      	ldr	r3, [pc, #280]	; (8001184 <HAL_GPIO_Init+0x2a8>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001074:	4a44      	ldr	r2, [pc, #272]	; (8001188 <HAL_GPIO_Init+0x2ac>)
 8001076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001078:	089b      	lsrs	r3, r3, #2
 800107a:	3302      	adds	r3, #2
 800107c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001080:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	220f      	movs	r2, #15
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	4013      	ands	r3, r2
 8001096:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a3c      	ldr	r2, [pc, #240]	; (800118c <HAL_GPIO_Init+0x2b0>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d01f      	beq.n	80010e0 <HAL_GPIO_Init+0x204>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a3b      	ldr	r2, [pc, #236]	; (8001190 <HAL_GPIO_Init+0x2b4>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d019      	beq.n	80010dc <HAL_GPIO_Init+0x200>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a3a      	ldr	r2, [pc, #232]	; (8001194 <HAL_GPIO_Init+0x2b8>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d013      	beq.n	80010d8 <HAL_GPIO_Init+0x1fc>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a39      	ldr	r2, [pc, #228]	; (8001198 <HAL_GPIO_Init+0x2bc>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d00d      	beq.n	80010d4 <HAL_GPIO_Init+0x1f8>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a38      	ldr	r2, [pc, #224]	; (800119c <HAL_GPIO_Init+0x2c0>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d007      	beq.n	80010d0 <HAL_GPIO_Init+0x1f4>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a37      	ldr	r2, [pc, #220]	; (80011a0 <HAL_GPIO_Init+0x2c4>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d101      	bne.n	80010cc <HAL_GPIO_Init+0x1f0>
 80010c8:	2305      	movs	r3, #5
 80010ca:	e00a      	b.n	80010e2 <HAL_GPIO_Init+0x206>
 80010cc:	2306      	movs	r3, #6
 80010ce:	e008      	b.n	80010e2 <HAL_GPIO_Init+0x206>
 80010d0:	2304      	movs	r3, #4
 80010d2:	e006      	b.n	80010e2 <HAL_GPIO_Init+0x206>
 80010d4:	2303      	movs	r3, #3
 80010d6:	e004      	b.n	80010e2 <HAL_GPIO_Init+0x206>
 80010d8:	2302      	movs	r3, #2
 80010da:	e002      	b.n	80010e2 <HAL_GPIO_Init+0x206>
 80010dc:	2301      	movs	r3, #1
 80010de:	e000      	b.n	80010e2 <HAL_GPIO_Init+0x206>
 80010e0:	2300      	movs	r3, #0
 80010e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010e4:	f002 0203 	and.w	r2, r2, #3
 80010e8:	0092      	lsls	r2, r2, #2
 80010ea:	4093      	lsls	r3, r2
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010f2:	4925      	ldr	r1, [pc, #148]	; (8001188 <HAL_GPIO_Init+0x2ac>)
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3302      	adds	r3, #2
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d006      	beq.n	800111a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800110c:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <HAL_GPIO_Init+0x2c8>)
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	4924      	ldr	r1, [pc, #144]	; (80011a4 <HAL_GPIO_Init+0x2c8>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	608b      	str	r3, [r1, #8]
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800111a:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <HAL_GPIO_Init+0x2c8>)
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	43db      	mvns	r3, r3
 8001122:	4920      	ldr	r1, [pc, #128]	; (80011a4 <HAL_GPIO_Init+0x2c8>)
 8001124:	4013      	ands	r3, r2
 8001126:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d006      	beq.n	8001142 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <HAL_GPIO_Init+0x2c8>)
 8001136:	68da      	ldr	r2, [r3, #12]
 8001138:	491a      	ldr	r1, [pc, #104]	; (80011a4 <HAL_GPIO_Init+0x2c8>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	4313      	orrs	r3, r2
 800113e:	60cb      	str	r3, [r1, #12]
 8001140:	e006      	b.n	8001150 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_GPIO_Init+0x2c8>)
 8001144:	68da      	ldr	r2, [r3, #12]
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	43db      	mvns	r3, r3
 800114a:	4916      	ldr	r1, [pc, #88]	; (80011a4 <HAL_GPIO_Init+0x2c8>)
 800114c:	4013      	ands	r3, r2
 800114e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d025      	beq.n	80011a8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <HAL_GPIO_Init+0x2c8>)
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	4910      	ldr	r1, [pc, #64]	; (80011a4 <HAL_GPIO_Init+0x2c8>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	604b      	str	r3, [r1, #4]
 8001168:	e025      	b.n	80011b6 <HAL_GPIO_Init+0x2da>
 800116a:	bf00      	nop
 800116c:	10320000 	.word	0x10320000
 8001170:	10310000 	.word	0x10310000
 8001174:	10220000 	.word	0x10220000
 8001178:	10210000 	.word	0x10210000
 800117c:	10120000 	.word	0x10120000
 8001180:	10110000 	.word	0x10110000
 8001184:	40021000 	.word	0x40021000
 8001188:	40010000 	.word	0x40010000
 800118c:	40010800 	.word	0x40010800
 8001190:	40010c00 	.word	0x40010c00
 8001194:	40011000 	.word	0x40011000
 8001198:	40011400 	.word	0x40011400
 800119c:	40011800 	.word	0x40011800
 80011a0:	40011c00 	.word	0x40011c00
 80011a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011a8:	4b15      	ldr	r3, [pc, #84]	; (8001200 <HAL_GPIO_Init+0x324>)
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	43db      	mvns	r3, r3
 80011b0:	4913      	ldr	r1, [pc, #76]	; (8001200 <HAL_GPIO_Init+0x324>)
 80011b2:	4013      	ands	r3, r2
 80011b4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d006      	beq.n	80011d0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <HAL_GPIO_Init+0x324>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	490e      	ldr	r1, [pc, #56]	; (8001200 <HAL_GPIO_Init+0x324>)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	600b      	str	r3, [r1, #0]
 80011ce:	e006      	b.n	80011de <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_GPIO_Init+0x324>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	4909      	ldr	r1, [pc, #36]	; (8001200 <HAL_GPIO_Init+0x324>)
 80011da:	4013      	ands	r3, r2
 80011dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	3301      	adds	r3, #1
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	fa22 f303 	lsr.w	r3, r2, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f47f ae7e 	bne.w	8000ef0 <HAL_GPIO_Init+0x14>
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	372c      	adds	r7, #44	; 0x2c
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	40010400 	.word	0x40010400

08001204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	807b      	strh	r3, [r7, #2]
 8001210:	4613      	mov	r3, r2
 8001212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001214:	787b      	ldrb	r3, [r7, #1]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800121a:	887a      	ldrh	r2, [r7, #2]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001220:	e003      	b.n	800122a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001222:	887b      	ldrh	r3, [r7, #2]
 8001224:	041a      	lsls	r2, r3, #16
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	611a      	str	r2, [r3, #16]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr

08001234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e12b      	b.n	800149e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d106      	bne.n	8001260 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff fa0a 	bl	8000674 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2224      	movs	r2, #36	; 0x24
 8001264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0201 	bic.w	r2, r2, #1
 8001276:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001286:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001296:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001298:	f001 f832 	bl	8002300 <HAL_RCC_GetPCLK1Freq>
 800129c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	4a81      	ldr	r2, [pc, #516]	; (80014a8 <HAL_I2C_Init+0x274>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d807      	bhi.n	80012b8 <HAL_I2C_Init+0x84>
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4a80      	ldr	r2, [pc, #512]	; (80014ac <HAL_I2C_Init+0x278>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	bf94      	ite	ls
 80012b0:	2301      	movls	r3, #1
 80012b2:	2300      	movhi	r3, #0
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	e006      	b.n	80012c6 <HAL_I2C_Init+0x92>
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4a7d      	ldr	r2, [pc, #500]	; (80014b0 <HAL_I2C_Init+0x27c>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	bf94      	ite	ls
 80012c0:	2301      	movls	r3, #1
 80012c2:	2300      	movhi	r3, #0
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e0e7      	b.n	800149e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	4a78      	ldr	r2, [pc, #480]	; (80014b4 <HAL_I2C_Init+0x280>)
 80012d2:	fba2 2303 	umull	r2, r3, r2, r3
 80012d6:	0c9b      	lsrs	r3, r3, #18
 80012d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	4a6a      	ldr	r2, [pc, #424]	; (80014a8 <HAL_I2C_Init+0x274>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d802      	bhi.n	8001308 <HAL_I2C_Init+0xd4>
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	3301      	adds	r3, #1
 8001306:	e009      	b.n	800131c <HAL_I2C_Init+0xe8>
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800130e:	fb02 f303 	mul.w	r3, r2, r3
 8001312:	4a69      	ldr	r2, [pc, #420]	; (80014b8 <HAL_I2C_Init+0x284>)
 8001314:	fba2 2303 	umull	r2, r3, r2, r3
 8001318:	099b      	lsrs	r3, r3, #6
 800131a:	3301      	adds	r3, #1
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	6812      	ldr	r2, [r2, #0]
 8001320:	430b      	orrs	r3, r1
 8001322:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800132e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	495c      	ldr	r1, [pc, #368]	; (80014a8 <HAL_I2C_Init+0x274>)
 8001338:	428b      	cmp	r3, r1
 800133a:	d819      	bhi.n	8001370 <HAL_I2C_Init+0x13c>
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	1e59      	subs	r1, r3, #1
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	fbb1 f3f3 	udiv	r3, r1, r3
 800134a:	1c59      	adds	r1, r3, #1
 800134c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001350:	400b      	ands	r3, r1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00a      	beq.n	800136c <HAL_I2C_Init+0x138>
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	1e59      	subs	r1, r3, #1
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fbb1 f3f3 	udiv	r3, r1, r3
 8001364:	3301      	adds	r3, #1
 8001366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800136a:	e051      	b.n	8001410 <HAL_I2C_Init+0x1dc>
 800136c:	2304      	movs	r3, #4
 800136e:	e04f      	b.n	8001410 <HAL_I2C_Init+0x1dc>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d111      	bne.n	800139c <HAL_I2C_Init+0x168>
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	1e58      	subs	r0, r3, #1
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6859      	ldr	r1, [r3, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	440b      	add	r3, r1
 8001386:	fbb0 f3f3 	udiv	r3, r0, r3
 800138a:	3301      	adds	r3, #1
 800138c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001390:	2b00      	cmp	r3, #0
 8001392:	bf0c      	ite	eq
 8001394:	2301      	moveq	r3, #1
 8001396:	2300      	movne	r3, #0
 8001398:	b2db      	uxtb	r3, r3
 800139a:	e012      	b.n	80013c2 <HAL_I2C_Init+0x18e>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	1e58      	subs	r0, r3, #1
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6859      	ldr	r1, [r3, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	0099      	lsls	r1, r3, #2
 80013ac:	440b      	add	r3, r1
 80013ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80013b2:	3301      	adds	r3, #1
 80013b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	bf0c      	ite	eq
 80013bc:	2301      	moveq	r3, #1
 80013be:	2300      	movne	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <HAL_I2C_Init+0x196>
 80013c6:	2301      	movs	r3, #1
 80013c8:	e022      	b.n	8001410 <HAL_I2C_Init+0x1dc>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10e      	bne.n	80013f0 <HAL_I2C_Init+0x1bc>
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	1e58      	subs	r0, r3, #1
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6859      	ldr	r1, [r3, #4]
 80013da:	460b      	mov	r3, r1
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	440b      	add	r3, r1
 80013e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80013e4:	3301      	adds	r3, #1
 80013e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ee:	e00f      	b.n	8001410 <HAL_I2C_Init+0x1dc>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	1e58      	subs	r0, r3, #1
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6859      	ldr	r1, [r3, #4]
 80013f8:	460b      	mov	r3, r1
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	0099      	lsls	r1, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	fbb0 f3f3 	udiv	r3, r0, r3
 8001406:	3301      	adds	r3, #1
 8001408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800140c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001410:	6879      	ldr	r1, [r7, #4]
 8001412:	6809      	ldr	r1, [r1, #0]
 8001414:	4313      	orrs	r3, r2
 8001416:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69da      	ldr	r2, [r3, #28]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	430a      	orrs	r2, r1
 8001432:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800143e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6911      	ldr	r1, [r2, #16]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	68d2      	ldr	r2, [r2, #12]
 800144a:	4311      	orrs	r1, r2
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6812      	ldr	r2, [r2, #0]
 8001450:	430b      	orrs	r3, r1
 8001452:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695a      	ldr	r2, [r3, #20]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	430a      	orrs	r2, r1
 800146e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 0201 	orr.w	r2, r2, #1
 800147e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2220      	movs	r2, #32
 800148a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	000186a0 	.word	0x000186a0
 80014ac:	001e847f 	.word	0x001e847f
 80014b0:	003d08ff 	.word	0x003d08ff
 80014b4:	431bde83 	.word	0x431bde83
 80014b8:	10624dd3 	.word	0x10624dd3

080014bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af02      	add	r7, sp, #8
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	607a      	str	r2, [r7, #4]
 80014c6:	461a      	mov	r2, r3
 80014c8:	460b      	mov	r3, r1
 80014ca:	817b      	strh	r3, [r7, #10]
 80014cc:	4613      	mov	r3, r2
 80014ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014d0:	f7ff fc16 	bl	8000d00 <HAL_GetTick>
 80014d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b20      	cmp	r3, #32
 80014e0:	f040 80e0 	bne.w	80016a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2319      	movs	r3, #25
 80014ea:	2201      	movs	r2, #1
 80014ec:	4970      	ldr	r1, [pc, #448]	; (80016b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f000 f964 	bl	80017bc <I2C_WaitOnFlagUntilTimeout>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80014fa:	2302      	movs	r3, #2
 80014fc:	e0d3      	b.n	80016a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001504:	2b01      	cmp	r3, #1
 8001506:	d101      	bne.n	800150c <HAL_I2C_Master_Transmit+0x50>
 8001508:	2302      	movs	r3, #2
 800150a:	e0cc      	b.n	80016a6 <HAL_I2C_Master_Transmit+0x1ea>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b01      	cmp	r3, #1
 8001520:	d007      	beq.n	8001532 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f042 0201 	orr.w	r2, r2, #1
 8001530:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001540:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2221      	movs	r2, #33	; 0x21
 8001546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2210      	movs	r2, #16
 800154e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	893a      	ldrh	r2, [r7, #8]
 8001562:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001568:	b29a      	uxth	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4a50      	ldr	r2, [pc, #320]	; (80016b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001572:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001574:	8979      	ldrh	r1, [r7, #10]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	6a3a      	ldr	r2, [r7, #32]
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f000 f89c 	bl	80016b8 <I2C_MasterRequestWrite>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e08d      	b.n	80016a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800158a:	2300      	movs	r3, #0
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80015a0:	e066      	b.n	8001670 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	6a39      	ldr	r1, [r7, #32]
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f000 fa22 	bl	80019f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00d      	beq.n	80015ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	d107      	bne.n	80015ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e06b      	b.n	80016a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d2:	781a      	ldrb	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	3b01      	subs	r3, #1
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f6:	3b01      	subs	r3, #1
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b04      	cmp	r3, #4
 800160a:	d11b      	bne.n	8001644 <HAL_I2C_Master_Transmit+0x188>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001610:	2b00      	cmp	r3, #0
 8001612:	d017      	beq.n	8001644 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	781a      	ldrb	r2, [r3, #0]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800162e:	b29b      	uxth	r3, r3
 8001630:	3b01      	subs	r3, #1
 8001632:	b29a      	uxth	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800163c:	3b01      	subs	r3, #1
 800163e:	b29a      	uxth	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	6a39      	ldr	r1, [r7, #32]
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f000 fa19 	bl	8001a80 <I2C_WaitOnBTFFlagUntilTimeout>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00d      	beq.n	8001670 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	2b04      	cmp	r3, #4
 800165a:	d107      	bne.n	800166c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800166a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e01a      	b.n	80016a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001674:	2b00      	cmp	r3, #0
 8001676:	d194      	bne.n	80015a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2220      	movs	r2, #32
 800168c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	e000      	b.n	80016a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80016a4:	2302      	movs	r3, #2
  }
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	00100002 	.word	0x00100002
 80016b4:	ffff0000 	.word	0xffff0000

080016b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af02      	add	r7, sp, #8
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	460b      	mov	r3, r1
 80016c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d006      	beq.n	80016e2 <I2C_MasterRequestWrite+0x2a>
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d003      	beq.n	80016e2 <I2C_MasterRequestWrite+0x2a>
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80016e0:	d108      	bne.n	80016f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	e00b      	b.n	800170c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	2b12      	cmp	r3, #18
 80016fa:	d107      	bne.n	800170c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800170a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 f84f 	bl	80017bc <I2C_WaitOnFlagUntilTimeout>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00d      	beq.n	8001740 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001732:	d103      	bne.n	800173c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f44f 7200 	mov.w	r2, #512	; 0x200
 800173a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e035      	b.n	80017ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001748:	d108      	bne.n	800175c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800174a:	897b      	ldrh	r3, [r7, #10]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	461a      	mov	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001758:	611a      	str	r2, [r3, #16]
 800175a:	e01b      	b.n	8001794 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800175c:	897b      	ldrh	r3, [r7, #10]
 800175e:	11db      	asrs	r3, r3, #7
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f003 0306 	and.w	r3, r3, #6
 8001766:	b2db      	uxtb	r3, r3
 8001768:	f063 030f 	orn	r3, r3, #15
 800176c:	b2da      	uxtb	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	490e      	ldr	r1, [pc, #56]	; (80017b4 <I2C_MasterRequestWrite+0xfc>)
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f000 f898 	bl	80018b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e010      	b.n	80017ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800178a:	897b      	ldrh	r3, [r7, #10]
 800178c:	b2da      	uxtb	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	4907      	ldr	r1, [pc, #28]	; (80017b8 <I2C_MasterRequestWrite+0x100>)
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f000 f888 	bl	80018b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	00010008 	.word	0x00010008
 80017b8:	00010002 	.word	0x00010002

080017bc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	603b      	str	r3, [r7, #0]
 80017c8:	4613      	mov	r3, r2
 80017ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017cc:	e048      	b.n	8001860 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d4:	d044      	beq.n	8001860 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017d6:	f7ff fa93 	bl	8000d00 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d302      	bcc.n	80017ec <I2C_WaitOnFlagUntilTimeout+0x30>
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d139      	bne.n	8001860 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	0c1b      	lsrs	r3, r3, #16
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d10d      	bne.n	8001812 <I2C_WaitOnFlagUntilTimeout+0x56>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	43da      	mvns	r2, r3
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	4013      	ands	r3, r2
 8001802:	b29b      	uxth	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	bf0c      	ite	eq
 8001808:	2301      	moveq	r3, #1
 800180a:	2300      	movne	r3, #0
 800180c:	b2db      	uxtb	r3, r3
 800180e:	461a      	mov	r2, r3
 8001810:	e00c      	b.n	800182c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	43da      	mvns	r2, r3
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	4013      	ands	r3, r2
 800181e:	b29b      	uxth	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	bf0c      	ite	eq
 8001824:	2301      	moveq	r3, #1
 8001826:	2300      	movne	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	461a      	mov	r2, r3
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	429a      	cmp	r2, r3
 8001830:	d116      	bne.n	8001860 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2200      	movs	r2, #0
 8001836:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2220      	movs	r2, #32
 800183c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f043 0220 	orr.w	r2, r3, #32
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e023      	b.n	80018a8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	0c1b      	lsrs	r3, r3, #16
 8001864:	b2db      	uxtb	r3, r3
 8001866:	2b01      	cmp	r3, #1
 8001868:	d10d      	bne.n	8001886 <I2C_WaitOnFlagUntilTimeout+0xca>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	43da      	mvns	r2, r3
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	4013      	ands	r3, r2
 8001876:	b29b      	uxth	r3, r3
 8001878:	2b00      	cmp	r3, #0
 800187a:	bf0c      	ite	eq
 800187c:	2301      	moveq	r3, #1
 800187e:	2300      	movne	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	461a      	mov	r2, r3
 8001884:	e00c      	b.n	80018a0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	43da      	mvns	r2, r3
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	4013      	ands	r3, r2
 8001892:	b29b      	uxth	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	bf0c      	ite	eq
 8001898:	2301      	moveq	r3, #1
 800189a:	2300      	movne	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	461a      	mov	r2, r3
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d093      	beq.n	80017ce <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80018be:	e071      	b.n	80019a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ce:	d123      	bne.n	8001918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80018e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2220      	movs	r2, #32
 80018f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	f043 0204 	orr.w	r2, r3, #4
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e067      	b.n	80019e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191e:	d041      	beq.n	80019a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001920:	f7ff f9ee 	bl	8000d00 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	429a      	cmp	r2, r3
 800192e:	d302      	bcc.n	8001936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d136      	bne.n	80019a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	0c1b      	lsrs	r3, r3, #16
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b01      	cmp	r3, #1
 800193e:	d10c      	bne.n	800195a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	43da      	mvns	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	4013      	ands	r3, r2
 800194c:	b29b      	uxth	r3, r3
 800194e:	2b00      	cmp	r3, #0
 8001950:	bf14      	ite	ne
 8001952:	2301      	movne	r3, #1
 8001954:	2300      	moveq	r3, #0
 8001956:	b2db      	uxtb	r3, r3
 8001958:	e00b      	b.n	8001972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	43da      	mvns	r2, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	4013      	ands	r3, r2
 8001966:	b29b      	uxth	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	bf14      	ite	ne
 800196c:	2301      	movne	r3, #1
 800196e:	2300      	moveq	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d016      	beq.n	80019a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2220      	movs	r2, #32
 8001980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001990:	f043 0220 	orr.w	r2, r3, #32
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e021      	b.n	80019e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	0c1b      	lsrs	r3, r3, #16
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d10c      	bne.n	80019c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	43da      	mvns	r2, r3
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	4013      	ands	r3, r2
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	bf14      	ite	ne
 80019c0:	2301      	movne	r3, #1
 80019c2:	2300      	moveq	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	e00b      	b.n	80019e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	43da      	mvns	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	4013      	ands	r3, r2
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	bf14      	ite	ne
 80019da:	2301      	movne	r3, #1
 80019dc:	2300      	moveq	r3, #0
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f47f af6d 	bne.w	80018c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019fc:	e034      	b.n	8001a68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 f886 	bl	8001b10 <I2C_IsAcknowledgeFailed>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e034      	b.n	8001a78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a14:	d028      	beq.n	8001a68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a16:	f7ff f973 	bl	8000d00 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	68ba      	ldr	r2, [r7, #8]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d302      	bcc.n	8001a2c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d11d      	bne.n	8001a68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a36:	2b80      	cmp	r3, #128	; 0x80
 8001a38:	d016      	beq.n	8001a68 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2220      	movs	r2, #32
 8001a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f043 0220 	orr.w	r2, r3, #32
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e007      	b.n	8001a78 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a72:	2b80      	cmp	r3, #128	; 0x80
 8001a74:	d1c3      	bne.n	80019fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a8c:	e034      	b.n	8001af8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 f83e 	bl	8001b10 <I2C_IsAcknowledgeFailed>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e034      	b.n	8001b08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa4:	d028      	beq.n	8001af8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aa6:	f7ff f92b 	bl	8000d00 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d302      	bcc.n	8001abc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d11d      	bne.n	8001af8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d016      	beq.n	8001af8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	f043 0220 	orr.w	r2, r3, #32
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e007      	b.n	8001b08 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	d1c3      	bne.n	8001a8e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b26:	d11b      	bne.n	8001b60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4c:	f043 0204 	orr.w	r2, r3, #4
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e272      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 8087 	beq.w	8001c9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b8c:	4b92      	ldr	r3, [pc, #584]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 030c 	and.w	r3, r3, #12
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d00c      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b98:	4b8f      	ldr	r3, [pc, #572]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 030c 	and.w	r3, r3, #12
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d112      	bne.n	8001bca <HAL_RCC_OscConfig+0x5e>
 8001ba4:	4b8c      	ldr	r3, [pc, #560]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb0:	d10b      	bne.n	8001bca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb2:	4b89      	ldr	r3, [pc, #548]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d06c      	beq.n	8001c98 <HAL_RCC_OscConfig+0x12c>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d168      	bne.n	8001c98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e24c      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd2:	d106      	bne.n	8001be2 <HAL_RCC_OscConfig+0x76>
 8001bd4:	4b80      	ldr	r3, [pc, #512]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a7f      	ldr	r2, [pc, #508]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	e02e      	b.n	8001c40 <HAL_RCC_OscConfig+0xd4>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x98>
 8001bea:	4b7b      	ldr	r3, [pc, #492]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a7a      	ldr	r2, [pc, #488]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	4b78      	ldr	r3, [pc, #480]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a77      	ldr	r2, [pc, #476]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	e01d      	b.n	8001c40 <HAL_RCC_OscConfig+0xd4>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c0c:	d10c      	bne.n	8001c28 <HAL_RCC_OscConfig+0xbc>
 8001c0e:	4b72      	ldr	r3, [pc, #456]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a71      	ldr	r2, [pc, #452]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	4b6f      	ldr	r3, [pc, #444]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a6e      	ldr	r2, [pc, #440]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	e00b      	b.n	8001c40 <HAL_RCC_OscConfig+0xd4>
 8001c28:	4b6b      	ldr	r3, [pc, #428]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a6a      	ldr	r2, [pc, #424]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	4b68      	ldr	r3, [pc, #416]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a67      	ldr	r2, [pc, #412]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d013      	beq.n	8001c70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7ff f85a 	bl	8000d00 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c50:	f7ff f856 	bl	8000d00 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b64      	cmp	r3, #100	; 0x64
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e200      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c62:	4b5d      	ldr	r3, [pc, #372]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f0      	beq.n	8001c50 <HAL_RCC_OscConfig+0xe4>
 8001c6e:	e014      	b.n	8001c9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c70:	f7ff f846 	bl	8000d00 <HAL_GetTick>
 8001c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c78:	f7ff f842 	bl	8000d00 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b64      	cmp	r3, #100	; 0x64
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e1ec      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c8a:	4b53      	ldr	r3, [pc, #332]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d1f0      	bne.n	8001c78 <HAL_RCC_OscConfig+0x10c>
 8001c96:	e000      	b.n	8001c9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d063      	beq.n	8001d6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ca6:	4b4c      	ldr	r3, [pc, #304]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00b      	beq.n	8001cca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cb2:	4b49      	ldr	r3, [pc, #292]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d11c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x18c>
 8001cbe:	4b46      	ldr	r3, [pc, #280]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d116      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cca:	4b43      	ldr	r3, [pc, #268]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d005      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x176>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d001      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e1c0      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce2:	4b3d      	ldr	r3, [pc, #244]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4939      	ldr	r1, [pc, #228]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cf6:	e03a      	b.n	8001d6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d020      	beq.n	8001d42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d00:	4b36      	ldr	r3, [pc, #216]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d06:	f7fe fffb 	bl	8000d00 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d0e:	f7fe fff7 	bl	8000d00 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e1a1      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d20:	4b2d      	ldr	r3, [pc, #180]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2c:	4b2a      	ldr	r3, [pc, #168]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	4927      	ldr	r1, [pc, #156]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	600b      	str	r3, [r1, #0]
 8001d40:	e015      	b.n	8001d6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d42:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <HAL_RCC_OscConfig+0x270>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7fe ffda 	bl	8000d00 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d50:	f7fe ffd6 	bl	8000d00 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e180      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d62:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d03a      	beq.n	8001df0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d019      	beq.n	8001db6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d82:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <HAL_RCC_OscConfig+0x274>)
 8001d84:	2201      	movs	r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d88:	f7fe ffba 	bl	8000d00 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d90:	f7fe ffb6 	bl	8000d00 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e160      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da2:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dae:	2001      	movs	r0, #1
 8001db0:	f000 faba 	bl	8002328 <RCC_Delay>
 8001db4:	e01c      	b.n	8001df0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <HAL_RCC_OscConfig+0x274>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbc:	f7fe ffa0 	bl	8000d00 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc2:	e00f      	b.n	8001de4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc4:	f7fe ff9c 	bl	8000d00 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d908      	bls.n	8001de4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e146      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	42420000 	.word	0x42420000
 8001de0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001de4:	4b92      	ldr	r3, [pc, #584]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1e9      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 80a6 	beq.w	8001f4a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e02:	4b8b      	ldr	r3, [pc, #556]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10d      	bne.n	8001e2a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0e:	4b88      	ldr	r3, [pc, #544]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	4a87      	ldr	r2, [pc, #540]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e18:	61d3      	str	r3, [r2, #28]
 8001e1a:	4b85      	ldr	r3, [pc, #532]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e26:	2301      	movs	r3, #1
 8001e28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2a:	4b82      	ldr	r3, [pc, #520]	; (8002034 <HAL_RCC_OscConfig+0x4c8>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d118      	bne.n	8001e68 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e36:	4b7f      	ldr	r3, [pc, #508]	; (8002034 <HAL_RCC_OscConfig+0x4c8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a7e      	ldr	r2, [pc, #504]	; (8002034 <HAL_RCC_OscConfig+0x4c8>)
 8001e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e42:	f7fe ff5d 	bl	8000d00 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e4a:	f7fe ff59 	bl	8000d00 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b64      	cmp	r3, #100	; 0x64
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e103      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5c:	4b75      	ldr	r3, [pc, #468]	; (8002034 <HAL_RCC_OscConfig+0x4c8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d106      	bne.n	8001e7e <HAL_RCC_OscConfig+0x312>
 8001e70:	4b6f      	ldr	r3, [pc, #444]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4a6e      	ldr	r2, [pc, #440]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	6213      	str	r3, [r2, #32]
 8001e7c:	e02d      	b.n	8001eda <HAL_RCC_OscConfig+0x36e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10c      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x334>
 8001e86:	4b6a      	ldr	r3, [pc, #424]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	4a69      	ldr	r2, [pc, #420]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	f023 0301 	bic.w	r3, r3, #1
 8001e90:	6213      	str	r3, [r2, #32]
 8001e92:	4b67      	ldr	r3, [pc, #412]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	4a66      	ldr	r2, [pc, #408]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	f023 0304 	bic.w	r3, r3, #4
 8001e9c:	6213      	str	r3, [r2, #32]
 8001e9e:	e01c      	b.n	8001eda <HAL_RCC_OscConfig+0x36e>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	2b05      	cmp	r3, #5
 8001ea6:	d10c      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x356>
 8001ea8:	4b61      	ldr	r3, [pc, #388]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	4a60      	ldr	r2, [pc, #384]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	f043 0304 	orr.w	r3, r3, #4
 8001eb2:	6213      	str	r3, [r2, #32]
 8001eb4:	4b5e      	ldr	r3, [pc, #376]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	4a5d      	ldr	r2, [pc, #372]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6213      	str	r3, [r2, #32]
 8001ec0:	e00b      	b.n	8001eda <HAL_RCC_OscConfig+0x36e>
 8001ec2:	4b5b      	ldr	r3, [pc, #364]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	4a5a      	ldr	r2, [pc, #360]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	f023 0301 	bic.w	r3, r3, #1
 8001ecc:	6213      	str	r3, [r2, #32]
 8001ece:	4b58      	ldr	r3, [pc, #352]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	4a57      	ldr	r2, [pc, #348]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	f023 0304 	bic.w	r3, r3, #4
 8001ed8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d015      	beq.n	8001f0e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee2:	f7fe ff0d 	bl	8000d00 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee8:	e00a      	b.n	8001f00 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eea:	f7fe ff09 	bl	8000d00 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e0b1      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f00:	4b4b      	ldr	r3, [pc, #300]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0ee      	beq.n	8001eea <HAL_RCC_OscConfig+0x37e>
 8001f0c:	e014      	b.n	8001f38 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f0e:	f7fe fef7 	bl	8000d00 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f16:	f7fe fef3 	bl	8000d00 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e09b      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2c:	4b40      	ldr	r3, [pc, #256]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1ee      	bne.n	8001f16 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f38:	7dfb      	ldrb	r3, [r7, #23]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d105      	bne.n	8001f4a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f3e:	4b3c      	ldr	r3, [pc, #240]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	4a3b      	ldr	r2, [pc, #236]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f48:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69db      	ldr	r3, [r3, #28]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 8087 	beq.w	8002062 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f54:	4b36      	ldr	r3, [pc, #216]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 030c 	and.w	r3, r3, #12
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d061      	beq.n	8002024 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d146      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f68:	4b33      	ldr	r3, [pc, #204]	; (8002038 <HAL_RCC_OscConfig+0x4cc>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6e:	f7fe fec7 	bl	8000d00 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f76:	f7fe fec3 	bl	8000d00 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e06d      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f88:	4b29      	ldr	r3, [pc, #164]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1f0      	bne.n	8001f76 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f9c:	d108      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f9e:	4b24      	ldr	r3, [pc, #144]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	4921      	ldr	r1, [pc, #132]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fb0:	4b1f      	ldr	r3, [pc, #124]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a19      	ldr	r1, [r3, #32]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	430b      	orrs	r3, r1
 8001fc2:	491b      	ldr	r1, [pc, #108]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <HAL_RCC_OscConfig+0x4cc>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fce:	f7fe fe97 	bl	8000d00 <HAL_GetTick>
 8001fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd4:	e008      	b.n	8001fe8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd6:	f7fe fe93 	bl	8000d00 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e03d      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0f0      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x46a>
 8001ff4:	e035      	b.n	8002062 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff6:	4b10      	ldr	r3, [pc, #64]	; (8002038 <HAL_RCC_OscConfig+0x4cc>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffc:	f7fe fe80 	bl	8000d00 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002004:	f7fe fe7c 	bl	8000d00 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e026      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_RCC_OscConfig+0x4c4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x498>
 8002022:	e01e      	b.n	8002062 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d107      	bne.n	800203c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e019      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
 8002030:	40021000 	.word	0x40021000
 8002034:	40007000 	.word	0x40007000
 8002038:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_RCC_OscConfig+0x500>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	429a      	cmp	r2, r3
 800204e:	d106      	bne.n	800205e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800205a:	429a      	cmp	r2, r3
 800205c:	d001      	beq.n	8002062 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40021000 	.word	0x40021000

08002070 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0d0      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002084:	4b6a      	ldr	r3, [pc, #424]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d910      	bls.n	80020b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b67      	ldr	r3, [pc, #412]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 0207 	bic.w	r2, r3, #7
 800209a:	4965      	ldr	r1, [pc, #404]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b63      	ldr	r3, [pc, #396]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0b8      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d020      	beq.n	8002102 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d005      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020cc:	4b59      	ldr	r3, [pc, #356]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	4a58      	ldr	r2, [pc, #352]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020e4:	4b53      	ldr	r3, [pc, #332]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	4a52      	ldr	r2, [pc, #328]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f0:	4b50      	ldr	r3, [pc, #320]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	494d      	ldr	r1, [pc, #308]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d040      	beq.n	8002190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002116:	4b47      	ldr	r3, [pc, #284]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d115      	bne.n	800214e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e07f      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d107      	bne.n	800213e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212e:	4b41      	ldr	r3, [pc, #260]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d109      	bne.n	800214e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e073      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213e:	4b3d      	ldr	r3, [pc, #244]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e06b      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800214e:	4b39      	ldr	r3, [pc, #228]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f023 0203 	bic.w	r2, r3, #3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	4936      	ldr	r1, [pc, #216]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002160:	f7fe fdce 	bl	8000d00 <HAL_GetTick>
 8002164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002166:	e00a      	b.n	800217e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002168:	f7fe fdca 	bl	8000d00 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	f241 3288 	movw	r2, #5000	; 0x1388
 8002176:	4293      	cmp	r3, r2
 8002178:	d901      	bls.n	800217e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e053      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217e:	4b2d      	ldr	r3, [pc, #180]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 020c 	and.w	r2, r3, #12
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	429a      	cmp	r2, r3
 800218e:	d1eb      	bne.n	8002168 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002190:	4b27      	ldr	r3, [pc, #156]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d210      	bcs.n	80021c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219e:	4b24      	ldr	r3, [pc, #144]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 0207 	bic.w	r2, r3, #7
 80021a6:	4922      	ldr	r1, [pc, #136]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ae:	4b20      	ldr	r3, [pc, #128]	; (8002230 <HAL_RCC_ClockConfig+0x1c0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0307 	and.w	r3, r3, #7
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d001      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e032      	b.n	8002226 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d008      	beq.n	80021de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4916      	ldr	r1, [pc, #88]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d009      	beq.n	80021fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021ea:	4b12      	ldr	r3, [pc, #72]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	490e      	ldr	r1, [pc, #56]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021fe:	f000 f821 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 8002202:	4602      	mov	r2, r0
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	490a      	ldr	r1, [pc, #40]	; (8002238 <HAL_RCC_ClockConfig+0x1c8>)
 8002210:	5ccb      	ldrb	r3, [r1, r3]
 8002212:	fa22 f303 	lsr.w	r3, r2, r3
 8002216:	4a09      	ldr	r2, [pc, #36]	; (800223c <HAL_RCC_ClockConfig+0x1cc>)
 8002218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <HAL_RCC_ClockConfig+0x1d0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe fd2c 	bl	8000c7c <HAL_InitTick>

  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40022000 	.word	0x40022000
 8002234:	40021000 	.word	0x40021000
 8002238:	08003dc8 	.word	0x08003dc8
 800223c:	20000000 	.word	0x20000000
 8002240:	20000004 	.word	0x20000004

08002244 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800225e:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b04      	cmp	r3, #4
 800226c:	d002      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x30>
 800226e:	2b08      	cmp	r3, #8
 8002270:	d003      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0x36>
 8002272:	e027      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002274:	4b19      	ldr	r3, [pc, #100]	; (80022dc <HAL_RCC_GetSysClockFreq+0x98>)
 8002276:	613b      	str	r3, [r7, #16]
      break;
 8002278:	e027      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	0c9b      	lsrs	r3, r3, #18
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	4a17      	ldr	r2, [pc, #92]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002284:	5cd3      	ldrb	r3, [r2, r3]
 8002286:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d010      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	0c5b      	lsrs	r3, r3, #17
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	4a11      	ldr	r2, [pc, #68]	; (80022e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800229e:	5cd3      	ldrb	r3, [r2, r3]
 80022a0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a0d      	ldr	r2, [pc, #52]	; (80022dc <HAL_RCC_GetSysClockFreq+0x98>)
 80022a6:	fb03 f202 	mul.w	r2, r3, r2
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	e004      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a0c      	ldr	r2, [pc, #48]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022b8:	fb02 f303 	mul.w	r3, r2, r3
 80022bc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	613b      	str	r3, [r7, #16]
      break;
 80022c2:	e002      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <HAL_RCC_GetSysClockFreq+0x98>)
 80022c6:	613b      	str	r3, [r7, #16]
      break;
 80022c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022ca:	693b      	ldr	r3, [r7, #16]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
 80022dc:	007a1200 	.word	0x007a1200
 80022e0:	08003de0 	.word	0x08003de0
 80022e4:	08003df0 	.word	0x08003df0
 80022e8:	003d0900 	.word	0x003d0900

080022ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f0:	4b02      	ldr	r3, [pc, #8]	; (80022fc <HAL_RCC_GetHCLKFreq+0x10>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	20000000 	.word	0x20000000

08002300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002304:	f7ff fff2 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 8002308:	4602      	mov	r2, r0
 800230a:	4b05      	ldr	r3, [pc, #20]	; (8002320 <HAL_RCC_GetPCLK1Freq+0x20>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	0a1b      	lsrs	r3, r3, #8
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	4903      	ldr	r1, [pc, #12]	; (8002324 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002316:	5ccb      	ldrb	r3, [r1, r3]
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	08003dd8 	.word	0x08003dd8

08002328 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002330:	4b0a      	ldr	r3, [pc, #40]	; (800235c <RCC_Delay+0x34>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a0a      	ldr	r2, [pc, #40]	; (8002360 <RCC_Delay+0x38>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	0a5b      	lsrs	r3, r3, #9
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	fb02 f303 	mul.w	r3, r2, r3
 8002342:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002344:	bf00      	nop
  }
  while (Delay --);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1e5a      	subs	r2, r3, #1
 800234a:	60fa      	str	r2, [r7, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f9      	bne.n	8002344 <RCC_Delay+0x1c>
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr
 800235c:	20000000 	.word	0x20000000
 8002360:	10624dd3 	.word	0x10624dd3

08002364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e041      	b.n	80023fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7fe fbba 	bl	8000b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3304      	adds	r3, #4
 80023a0:	4619      	mov	r1, r3
 80023a2:	4610      	mov	r0, r2
 80023a4:	f000 fcce 	bl	8002d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e041      	b.n	8002498 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d106      	bne.n	800242e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f839 	bl	80024a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2202      	movs	r2, #2
 8002432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3304      	adds	r3, #4
 800243e:	4619      	mov	r1, r3
 8002440:	4610      	mov	r0, r2
 8002442:	f000 fc7f 	bl	8002d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
	...

080024b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d109      	bne.n	80024d8 <HAL_TIM_PWM_Start+0x24>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	bf14      	ite	ne
 80024d0:	2301      	movne	r3, #1
 80024d2:	2300      	moveq	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	e022      	b.n	800251e <HAL_TIM_PWM_Start+0x6a>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d109      	bne.n	80024f2 <HAL_TIM_PWM_Start+0x3e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	bf14      	ite	ne
 80024ea:	2301      	movne	r3, #1
 80024ec:	2300      	moveq	r3, #0
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	e015      	b.n	800251e <HAL_TIM_PWM_Start+0x6a>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d109      	bne.n	800250c <HAL_TIM_PWM_Start+0x58>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b01      	cmp	r3, #1
 8002502:	bf14      	ite	ne
 8002504:	2301      	movne	r3, #1
 8002506:	2300      	moveq	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	e008      	b.n	800251e <HAL_TIM_PWM_Start+0x6a>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b01      	cmp	r3, #1
 8002516:	bf14      	ite	ne
 8002518:	2301      	movne	r3, #1
 800251a:	2300      	moveq	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e072      	b.n	800260c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d104      	bne.n	8002536 <HAL_TIM_PWM_Start+0x82>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002534:	e013      	b.n	800255e <HAL_TIM_PWM_Start+0xaa>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b04      	cmp	r3, #4
 800253a:	d104      	bne.n	8002546 <HAL_TIM_PWM_Start+0x92>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002544:	e00b      	b.n	800255e <HAL_TIM_PWM_Start+0xaa>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b08      	cmp	r3, #8
 800254a:	d104      	bne.n	8002556 <HAL_TIM_PWM_Start+0xa2>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2202      	movs	r2, #2
 8002550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002554:	e003      	b.n	800255e <HAL_TIM_PWM_Start+0xaa>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2202      	movs	r2, #2
 800255a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2201      	movs	r2, #1
 8002564:	6839      	ldr	r1, [r7, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f001 f85f 	bl	800362a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a28      	ldr	r2, [pc, #160]	; (8002614 <HAL_TIM_PWM_Start+0x160>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d004      	beq.n	8002580 <HAL_TIM_PWM_Start+0xcc>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a27      	ldr	r2, [pc, #156]	; (8002618 <HAL_TIM_PWM_Start+0x164>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d101      	bne.n	8002584 <HAL_TIM_PWM_Start+0xd0>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <HAL_TIM_PWM_Start+0xd2>
 8002584:	2300      	movs	r3, #0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d007      	beq.n	800259a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002598:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a1d      	ldr	r2, [pc, #116]	; (8002614 <HAL_TIM_PWM_Start+0x160>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d018      	beq.n	80025d6 <HAL_TIM_PWM_Start+0x122>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a1b      	ldr	r2, [pc, #108]	; (8002618 <HAL_TIM_PWM_Start+0x164>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d013      	beq.n	80025d6 <HAL_TIM_PWM_Start+0x122>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b6:	d00e      	beq.n	80025d6 <HAL_TIM_PWM_Start+0x122>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a17      	ldr	r2, [pc, #92]	; (800261c <HAL_TIM_PWM_Start+0x168>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d009      	beq.n	80025d6 <HAL_TIM_PWM_Start+0x122>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a16      	ldr	r2, [pc, #88]	; (8002620 <HAL_TIM_PWM_Start+0x16c>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d004      	beq.n	80025d6 <HAL_TIM_PWM_Start+0x122>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a14      	ldr	r2, [pc, #80]	; (8002624 <HAL_TIM_PWM_Start+0x170>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d111      	bne.n	80025fa <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b06      	cmp	r3, #6
 80025e6:	d010      	beq.n	800260a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f8:	e007      	b.n	800260a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0201 	orr.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40012c00 	.word	0x40012c00
 8002618:	40013400 	.word	0x40013400
 800261c:	40000400 	.word	0x40000400
 8002620:	40000800 	.word	0x40000800
 8002624:	40000c00 	.word	0x40000c00

08002628 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e041      	b.n	80026be <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d106      	bne.n	8002654 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f839 	bl	80026c6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3304      	adds	r3, #4
 8002664:	4619      	mov	r1, r3
 8002666:	4610      	mov	r0, r2
 8002668:	f000 fb6c 	bl	8002d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d104      	bne.n	80026f2 <HAL_TIM_IC_Start+0x1a>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	e013      	b.n	800271a <HAL_TIM_IC_Start+0x42>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d104      	bne.n	8002702 <HAL_TIM_IC_Start+0x2a>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	e00b      	b.n	800271a <HAL_TIM_IC_Start+0x42>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b08      	cmp	r3, #8
 8002706:	d104      	bne.n	8002712 <HAL_TIM_IC_Start+0x3a>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800270e:	b2db      	uxtb	r3, r3
 8002710:	e003      	b.n	800271a <HAL_TIM_IC_Start+0x42>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002718:	b2db      	uxtb	r3, r3
 800271a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d104      	bne.n	800272c <HAL_TIM_IC_Start+0x54>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002728:	b2db      	uxtb	r3, r3
 800272a:	e013      	b.n	8002754 <HAL_TIM_IC_Start+0x7c>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2b04      	cmp	r3, #4
 8002730:	d104      	bne.n	800273c <HAL_TIM_IC_Start+0x64>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002738:	b2db      	uxtb	r3, r3
 800273a:	e00b      	b.n	8002754 <HAL_TIM_IC_Start+0x7c>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	2b08      	cmp	r3, #8
 8002740:	d104      	bne.n	800274c <HAL_TIM_IC_Start+0x74>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002748:	b2db      	uxtb	r3, r3
 800274a:	e003      	b.n	8002754 <HAL_TIM_IC_Start+0x7c>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002752:	b2db      	uxtb	r3, r3
 8002754:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d102      	bne.n	8002762 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800275c:	7bbb      	ldrb	r3, [r7, #14]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d001      	beq.n	8002766 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e077      	b.n	8002856 <HAL_TIM_IC_Start+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d104      	bne.n	8002776 <HAL_TIM_IC_Start+0x9e>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002774:	e013      	b.n	800279e <HAL_TIM_IC_Start+0xc6>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b04      	cmp	r3, #4
 800277a:	d104      	bne.n	8002786 <HAL_TIM_IC_Start+0xae>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002784:	e00b      	b.n	800279e <HAL_TIM_IC_Start+0xc6>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b08      	cmp	r3, #8
 800278a:	d104      	bne.n	8002796 <HAL_TIM_IC_Start+0xbe>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002794:	e003      	b.n	800279e <HAL_TIM_IC_Start+0xc6>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2202      	movs	r2, #2
 800279a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d104      	bne.n	80027ae <HAL_TIM_IC_Start+0xd6>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027ac:	e013      	b.n	80027d6 <HAL_TIM_IC_Start+0xfe>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d104      	bne.n	80027be <HAL_TIM_IC_Start+0xe6>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027bc:	e00b      	b.n	80027d6 <HAL_TIM_IC_Start+0xfe>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d104      	bne.n	80027ce <HAL_TIM_IC_Start+0xf6>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027cc:	e003      	b.n	80027d6 <HAL_TIM_IC_Start+0xfe>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2202      	movs	r2, #2
 80027d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2201      	movs	r2, #1
 80027dc:	6839      	ldr	r1, [r7, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 ff23 	bl	800362a <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1d      	ldr	r2, [pc, #116]	; (8002860 <HAL_TIM_IC_Start+0x188>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d018      	beq.n	8002820 <HAL_TIM_IC_Start+0x148>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a1c      	ldr	r2, [pc, #112]	; (8002864 <HAL_TIM_IC_Start+0x18c>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d013      	beq.n	8002820 <HAL_TIM_IC_Start+0x148>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002800:	d00e      	beq.n	8002820 <HAL_TIM_IC_Start+0x148>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a18      	ldr	r2, [pc, #96]	; (8002868 <HAL_TIM_IC_Start+0x190>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d009      	beq.n	8002820 <HAL_TIM_IC_Start+0x148>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a16      	ldr	r2, [pc, #88]	; (800286c <HAL_TIM_IC_Start+0x194>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d004      	beq.n	8002820 <HAL_TIM_IC_Start+0x148>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a15      	ldr	r2, [pc, #84]	; (8002870 <HAL_TIM_IC_Start+0x198>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d111      	bne.n	8002844 <HAL_TIM_IC_Start+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2b06      	cmp	r3, #6
 8002830:	d010      	beq.n	8002854 <HAL_TIM_IC_Start+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 0201 	orr.w	r2, r2, #1
 8002840:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002842:	e007      	b.n	8002854 <HAL_TIM_IC_Start+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40012c00 	.word	0x40012c00
 8002864:	40013400 	.word	0x40013400
 8002868:	40000400 	.word	0x40000400
 800286c:	40000800 	.word	0x40000800
 8002870:	40000c00 	.word	0x40000c00

08002874 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_TIM_IC_ConfigChannel+0x1e>
 800288e:	2302      	movs	r3, #2
 8002890:	e088      	b.n	80029a4 <HAL_TIM_IC_ConfigChannel+0x130>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d11b      	bne.n	80028d8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80028b0:	f000 fd0c 	bl	80032cc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699a      	ldr	r2, [r3, #24]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 020c 	bic.w	r2, r2, #12
 80028c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6999      	ldr	r1, [r3, #24]
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	619a      	str	r2, [r3, #24]
 80028d6:	e060      	b.n	800299a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d11c      	bne.n	8002918 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80028ee:	f000 fd81 	bl	80033f4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	699a      	ldr	r2, [r3, #24]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002900:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6999      	ldr	r1, [r3, #24]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	021a      	lsls	r2, r3, #8
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	619a      	str	r2, [r3, #24]
 8002916:	e040      	b.n	800299a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b08      	cmp	r3, #8
 800291c:	d11b      	bne.n	8002956 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800292e:	f000 fdcc 	bl	80034ca <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	69da      	ldr	r2, [r3, #28]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 020c 	bic.w	r2, r2, #12
 8002940:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	69d9      	ldr	r1, [r3, #28]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	61da      	str	r2, [r3, #28]
 8002954:	e021      	b.n	800299a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b0c      	cmp	r3, #12
 800295a:	d11c      	bne.n	8002996 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800296c:	f000 fde8 	bl	8003540 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	69da      	ldr	r2, [r3, #28]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800297e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	69d9      	ldr	r1, [r3, #28]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	021a      	lsls	r2, r3, #8
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	61da      	str	r2, [r3, #28]
 8002994:	e001      	b.n	800299a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e0ae      	b.n	8002b28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b0c      	cmp	r3, #12
 80029d6:	f200 809f 	bhi.w	8002b18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80029da:	a201      	add	r2, pc, #4	; (adr r2, 80029e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80029dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e0:	08002a15 	.word	0x08002a15
 80029e4:	08002b19 	.word	0x08002b19
 80029e8:	08002b19 	.word	0x08002b19
 80029ec:	08002b19 	.word	0x08002b19
 80029f0:	08002a55 	.word	0x08002a55
 80029f4:	08002b19 	.word	0x08002b19
 80029f8:	08002b19 	.word	0x08002b19
 80029fc:	08002b19 	.word	0x08002b19
 8002a00:	08002a97 	.word	0x08002a97
 8002a04:	08002b19 	.word	0x08002b19
 8002a08:	08002b19 	.word	0x08002b19
 8002a0c:	08002b19 	.word	0x08002b19
 8002a10:	08002ad7 	.word	0x08002ad7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68b9      	ldr	r1, [r7, #8]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fa18 	bl	8002e50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0208 	orr.w	r2, r2, #8
 8002a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699a      	ldr	r2, [r3, #24]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0204 	bic.w	r2, r2, #4
 8002a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6999      	ldr	r1, [r3, #24]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	619a      	str	r2, [r3, #24]
      break;
 8002a52:	e064      	b.n	8002b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 fa68 	bl	8002f30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699a      	ldr	r2, [r3, #24]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	699a      	ldr	r2, [r3, #24]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6999      	ldr	r1, [r3, #24]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	021a      	lsls	r2, r3, #8
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	619a      	str	r2, [r3, #24]
      break;
 8002a94:	e043      	b.n	8002b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68b9      	ldr	r1, [r7, #8]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 fabb 	bl	8003018 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	69da      	ldr	r2, [r3, #28]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0208 	orr.w	r2, r2, #8
 8002ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	69da      	ldr	r2, [r3, #28]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 0204 	bic.w	r2, r2, #4
 8002ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	69d9      	ldr	r1, [r3, #28]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	61da      	str	r2, [r3, #28]
      break;
 8002ad4:	e023      	b.n	8002b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fb0f 	bl	8003100 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	69da      	ldr	r2, [r3, #28]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	69da      	ldr	r2, [r3, #28]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	69d9      	ldr	r1, [r3, #28]
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	021a      	lsls	r2, r3, #8
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	61da      	str	r2, [r3, #28]
      break;
 8002b16:	e002      	b.n	8002b1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_TIM_ConfigClockSource+0x1c>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e0b4      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0x186>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2202      	movs	r2, #2
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b84:	d03e      	beq.n	8002c04 <HAL_TIM_ConfigClockSource+0xd4>
 8002b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b8a:	f200 8087 	bhi.w	8002c9c <HAL_TIM_ConfigClockSource+0x16c>
 8002b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b92:	f000 8086 	beq.w	8002ca2 <HAL_TIM_ConfigClockSource+0x172>
 8002b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b9a:	d87f      	bhi.n	8002c9c <HAL_TIM_ConfigClockSource+0x16c>
 8002b9c:	2b70      	cmp	r3, #112	; 0x70
 8002b9e:	d01a      	beq.n	8002bd6 <HAL_TIM_ConfigClockSource+0xa6>
 8002ba0:	2b70      	cmp	r3, #112	; 0x70
 8002ba2:	d87b      	bhi.n	8002c9c <HAL_TIM_ConfigClockSource+0x16c>
 8002ba4:	2b60      	cmp	r3, #96	; 0x60
 8002ba6:	d050      	beq.n	8002c4a <HAL_TIM_ConfigClockSource+0x11a>
 8002ba8:	2b60      	cmp	r3, #96	; 0x60
 8002baa:	d877      	bhi.n	8002c9c <HAL_TIM_ConfigClockSource+0x16c>
 8002bac:	2b50      	cmp	r3, #80	; 0x50
 8002bae:	d03c      	beq.n	8002c2a <HAL_TIM_ConfigClockSource+0xfa>
 8002bb0:	2b50      	cmp	r3, #80	; 0x50
 8002bb2:	d873      	bhi.n	8002c9c <HAL_TIM_ConfigClockSource+0x16c>
 8002bb4:	2b40      	cmp	r3, #64	; 0x40
 8002bb6:	d058      	beq.n	8002c6a <HAL_TIM_ConfigClockSource+0x13a>
 8002bb8:	2b40      	cmp	r3, #64	; 0x40
 8002bba:	d86f      	bhi.n	8002c9c <HAL_TIM_ConfigClockSource+0x16c>
 8002bbc:	2b30      	cmp	r3, #48	; 0x30
 8002bbe:	d064      	beq.n	8002c8a <HAL_TIM_ConfigClockSource+0x15a>
 8002bc0:	2b30      	cmp	r3, #48	; 0x30
 8002bc2:	d86b      	bhi.n	8002c9c <HAL_TIM_ConfigClockSource+0x16c>
 8002bc4:	2b20      	cmp	r3, #32
 8002bc6:	d060      	beq.n	8002c8a <HAL_TIM_ConfigClockSource+0x15a>
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	d867      	bhi.n	8002c9c <HAL_TIM_ConfigClockSource+0x16c>
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d05c      	beq.n	8002c8a <HAL_TIM_ConfigClockSource+0x15a>
 8002bd0:	2b10      	cmp	r3, #16
 8002bd2:	d05a      	beq.n	8002c8a <HAL_TIM_ConfigClockSource+0x15a>
 8002bd4:	e062      	b.n	8002c9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002be6:	f000 fd01 	bl	80035ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002bf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	609a      	str	r2, [r3, #8]
      break;
 8002c02:	e04f      	b.n	8002ca4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c14:	f000 fcea 	bl	80035ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c26:	609a      	str	r2, [r3, #8]
      break;
 8002c28:	e03c      	b.n	8002ca4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c36:	461a      	mov	r2, r3
 8002c38:	f000 fbae 	bl	8003398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2150      	movs	r1, #80	; 0x50
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 fcb8 	bl	80035b8 <TIM_ITRx_SetConfig>
      break;
 8002c48:	e02c      	b.n	8002ca4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c56:	461a      	mov	r2, r3
 8002c58:	f000 fc08 	bl	800346c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2160      	movs	r1, #96	; 0x60
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 fca8 	bl	80035b8 <TIM_ITRx_SetConfig>
      break;
 8002c68:	e01c      	b.n	8002ca4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c76:	461a      	mov	r2, r3
 8002c78:	f000 fb8e 	bl	8003398 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2140      	movs	r1, #64	; 0x40
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fc98 	bl	80035b8 <TIM_ITRx_SetConfig>
      break;
 8002c88:	e00c      	b.n	8002ca4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4619      	mov	r1, r3
 8002c94:	4610      	mov	r0, r2
 8002c96:	f000 fc8f 	bl	80035b8 <TIM_ITRx_SetConfig>
      break;
 8002c9a:	e003      	b.n	8002ca4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca0:	e000      	b.n	8002ca4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ca2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e031      	b.n	8002d3a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002ce6:	6839      	ldr	r1, [r7, #0]
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 fa5d 	bl	80031a8 <TIM_SlaveTimer_SetConfig>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d009      	beq.n	8002d08 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e018      	b.n	8002d3a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d16:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d26:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a39      	ldr	r2, [pc, #228]	; (8002e3c <TIM_Base_SetConfig+0xf8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d013      	beq.n	8002d84 <TIM_Base_SetConfig+0x40>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a38      	ldr	r2, [pc, #224]	; (8002e40 <TIM_Base_SetConfig+0xfc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d00f      	beq.n	8002d84 <TIM_Base_SetConfig+0x40>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6a:	d00b      	beq.n	8002d84 <TIM_Base_SetConfig+0x40>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a35      	ldr	r2, [pc, #212]	; (8002e44 <TIM_Base_SetConfig+0x100>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d007      	beq.n	8002d84 <TIM_Base_SetConfig+0x40>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a34      	ldr	r2, [pc, #208]	; (8002e48 <TIM_Base_SetConfig+0x104>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d003      	beq.n	8002d84 <TIM_Base_SetConfig+0x40>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a33      	ldr	r2, [pc, #204]	; (8002e4c <TIM_Base_SetConfig+0x108>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d108      	bne.n	8002d96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a28      	ldr	r2, [pc, #160]	; (8002e3c <TIM_Base_SetConfig+0xf8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <TIM_Base_SetConfig+0x82>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a27      	ldr	r2, [pc, #156]	; (8002e40 <TIM_Base_SetConfig+0xfc>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00f      	beq.n	8002dc6 <TIM_Base_SetConfig+0x82>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dac:	d00b      	beq.n	8002dc6 <TIM_Base_SetConfig+0x82>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a24      	ldr	r2, [pc, #144]	; (8002e44 <TIM_Base_SetConfig+0x100>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d007      	beq.n	8002dc6 <TIM_Base_SetConfig+0x82>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a23      	ldr	r2, [pc, #140]	; (8002e48 <TIM_Base_SetConfig+0x104>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d003      	beq.n	8002dc6 <TIM_Base_SetConfig+0x82>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a22      	ldr	r2, [pc, #136]	; (8002e4c <TIM_Base_SetConfig+0x108>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d108      	bne.n	8002dd8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a0f      	ldr	r2, [pc, #60]	; (8002e3c <TIM_Base_SetConfig+0xf8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d003      	beq.n	8002e0c <TIM_Base_SetConfig+0xc8>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a0e      	ldr	r2, [pc, #56]	; (8002e40 <TIM_Base_SetConfig+0xfc>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d103      	bne.n	8002e14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d005      	beq.n	8002e32 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f023 0201 	bic.w	r2, r3, #1
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	611a      	str	r2, [r3, #16]
  }
}
 8002e32:	bf00      	nop
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	40012c00 	.word	0x40012c00
 8002e40:	40013400 	.word	0x40013400
 8002e44:	40000400 	.word	0x40000400
 8002e48:	40000800 	.word	0x40000800
 8002e4c:	40000c00 	.word	0x40000c00

08002e50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	f023 0201 	bic.w	r2, r3, #1
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0303 	bic.w	r3, r3, #3
 8002e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f023 0302 	bic.w	r3, r3, #2
 8002e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a20      	ldr	r2, [pc, #128]	; (8002f28 <TIM_OC1_SetConfig+0xd8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d003      	beq.n	8002eb4 <TIM_OC1_SetConfig+0x64>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a1f      	ldr	r2, [pc, #124]	; (8002f2c <TIM_OC1_SetConfig+0xdc>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d10c      	bne.n	8002ece <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	f023 0308 	bic.w	r3, r3, #8
 8002eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f023 0304 	bic.w	r3, r3, #4
 8002ecc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a15      	ldr	r2, [pc, #84]	; (8002f28 <TIM_OC1_SetConfig+0xd8>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d003      	beq.n	8002ede <TIM_OC1_SetConfig+0x8e>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <TIM_OC1_SetConfig+0xdc>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d111      	bne.n	8002f02 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ee4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002eec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	621a      	str	r2, [r3, #32]
}
 8002f1c:	bf00      	nop
 8002f1e:	371c      	adds	r7, #28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40012c00 	.word	0x40012c00
 8002f2c:	40013400 	.word	0x40013400

08002f30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	f023 0210 	bic.w	r2, r3, #16
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	021b      	lsls	r3, r3, #8
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f023 0320 	bic.w	r3, r3, #32
 8002f7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a21      	ldr	r2, [pc, #132]	; (8003010 <TIM_OC2_SetConfig+0xe0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d003      	beq.n	8002f98 <TIM_OC2_SetConfig+0x68>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a20      	ldr	r2, [pc, #128]	; (8003014 <TIM_OC2_SetConfig+0xe4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d10d      	bne.n	8002fb4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a16      	ldr	r2, [pc, #88]	; (8003010 <TIM_OC2_SetConfig+0xe0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d003      	beq.n	8002fc4 <TIM_OC2_SetConfig+0x94>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a15      	ldr	r2, [pc, #84]	; (8003014 <TIM_OC2_SetConfig+0xe4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d113      	bne.n	8002fec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	621a      	str	r2, [r3, #32]
}
 8003006:	bf00      	nop
 8003008:	371c      	adds	r7, #28
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr
 8003010:	40012c00 	.word	0x40012c00
 8003014:	40013400 	.word	0x40013400

08003018 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 0303 	bic.w	r3, r3, #3
 800304e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4313      	orrs	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	4313      	orrs	r3, r2
 800306c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a21      	ldr	r2, [pc, #132]	; (80030f8 <TIM_OC3_SetConfig+0xe0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d003      	beq.n	800307e <TIM_OC3_SetConfig+0x66>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a20      	ldr	r2, [pc, #128]	; (80030fc <TIM_OC3_SetConfig+0xe4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d10d      	bne.n	800309a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003084:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	021b      	lsls	r3, r3, #8
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4313      	orrs	r3, r2
 8003090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a16      	ldr	r2, [pc, #88]	; (80030f8 <TIM_OC3_SetConfig+0xe0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d003      	beq.n	80030aa <TIM_OC3_SetConfig+0x92>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a15      	ldr	r2, [pc, #84]	; (80030fc <TIM_OC3_SetConfig+0xe4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d113      	bne.n	80030d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	621a      	str	r2, [r3, #32]
}
 80030ec:	bf00      	nop
 80030ee:	371c      	adds	r7, #28
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bc80      	pop	{r7}
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40012c00 	.word	0x40012c00
 80030fc:	40013400 	.word	0x40013400

08003100 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800312e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	021b      	lsls	r3, r3, #8
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800314a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	031b      	lsls	r3, r3, #12
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a11      	ldr	r2, [pc, #68]	; (80031a0 <TIM_OC4_SetConfig+0xa0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d003      	beq.n	8003168 <TIM_OC4_SetConfig+0x68>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a10      	ldr	r2, [pc, #64]	; (80031a4 <TIM_OC4_SetConfig+0xa4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d109      	bne.n	800317c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800316e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	019b      	lsls	r3, r3, #6
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	621a      	str	r2, [r3, #32]
}
 8003196:	bf00      	nop
 8003198:	371c      	adds	r7, #28
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr
 80031a0:	40012c00 	.word	0x40012c00
 80031a4:	40013400 	.word	0x40013400

080031a8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f023 0307 	bic.w	r3, r3, #7
 80031d6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b70      	cmp	r3, #112	; 0x70
 80031f0:	d01a      	beq.n	8003228 <TIM_SlaveTimer_SetConfig+0x80>
 80031f2:	2b70      	cmp	r3, #112	; 0x70
 80031f4:	d860      	bhi.n	80032b8 <TIM_SlaveTimer_SetConfig+0x110>
 80031f6:	2b60      	cmp	r3, #96	; 0x60
 80031f8:	d054      	beq.n	80032a4 <TIM_SlaveTimer_SetConfig+0xfc>
 80031fa:	2b60      	cmp	r3, #96	; 0x60
 80031fc:	d85c      	bhi.n	80032b8 <TIM_SlaveTimer_SetConfig+0x110>
 80031fe:	2b50      	cmp	r3, #80	; 0x50
 8003200:	d046      	beq.n	8003290 <TIM_SlaveTimer_SetConfig+0xe8>
 8003202:	2b50      	cmp	r3, #80	; 0x50
 8003204:	d858      	bhi.n	80032b8 <TIM_SlaveTimer_SetConfig+0x110>
 8003206:	2b40      	cmp	r3, #64	; 0x40
 8003208:	d019      	beq.n	800323e <TIM_SlaveTimer_SetConfig+0x96>
 800320a:	2b40      	cmp	r3, #64	; 0x40
 800320c:	d854      	bhi.n	80032b8 <TIM_SlaveTimer_SetConfig+0x110>
 800320e:	2b30      	cmp	r3, #48	; 0x30
 8003210:	d055      	beq.n	80032be <TIM_SlaveTimer_SetConfig+0x116>
 8003212:	2b30      	cmp	r3, #48	; 0x30
 8003214:	d850      	bhi.n	80032b8 <TIM_SlaveTimer_SetConfig+0x110>
 8003216:	2b20      	cmp	r3, #32
 8003218:	d051      	beq.n	80032be <TIM_SlaveTimer_SetConfig+0x116>
 800321a:	2b20      	cmp	r3, #32
 800321c:	d84c      	bhi.n	80032b8 <TIM_SlaveTimer_SetConfig+0x110>
 800321e:	2b00      	cmp	r3, #0
 8003220:	d04d      	beq.n	80032be <TIM_SlaveTimer_SetConfig+0x116>
 8003222:	2b10      	cmp	r3, #16
 8003224:	d04b      	beq.n	80032be <TIM_SlaveTimer_SetConfig+0x116>
 8003226:	e047      	b.n	80032b8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003238:	f000 f9d8 	bl	80035ec <TIM_ETR_SetConfig>
      break;
 800323c:	e040      	b.n	80032c0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b05      	cmp	r3, #5
 8003244:	d101      	bne.n	800324a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e03b      	b.n	80032c2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6a1a      	ldr	r2, [r3, #32]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0201 	bic.w	r2, r2, #1
 8003260:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003270:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	4313      	orrs	r3, r2
 800327c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	621a      	str	r2, [r3, #32]
      break;
 800328e:	e017      	b.n	80032c0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800329c:	461a      	mov	r2, r3
 800329e:	f000 f87b 	bl	8003398 <TIM_TI1_ConfigInputStage>
      break;
 80032a2:	e00d      	b.n	80032c0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032b0:	461a      	mov	r2, r3
 80032b2:	f000 f8db 	bl	800346c <TIM_TI2_ConfigInputStage>
      break;
 80032b6:	e003      	b.n	80032c0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	75fb      	strb	r3, [r7, #23]
      break;
 80032bc:	e000      	b.n	80032c0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80032be:	bf00      	nop
  }

  return status;
 80032c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f023 0201 	bic.w	r2, r3, #1
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4a23      	ldr	r2, [pc, #140]	; (8003384 <TIM_TI1_SetConfig+0xb8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d013      	beq.n	8003322 <TIM_TI1_SetConfig+0x56>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4a22      	ldr	r2, [pc, #136]	; (8003388 <TIM_TI1_SetConfig+0xbc>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00f      	beq.n	8003322 <TIM_TI1_SetConfig+0x56>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003308:	d00b      	beq.n	8003322 <TIM_TI1_SetConfig+0x56>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4a1f      	ldr	r2, [pc, #124]	; (800338c <TIM_TI1_SetConfig+0xc0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d007      	beq.n	8003322 <TIM_TI1_SetConfig+0x56>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4a1e      	ldr	r2, [pc, #120]	; (8003390 <TIM_TI1_SetConfig+0xc4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d003      	beq.n	8003322 <TIM_TI1_SetConfig+0x56>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4a1d      	ldr	r2, [pc, #116]	; (8003394 <TIM_TI1_SetConfig+0xc8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d101      	bne.n	8003326 <TIM_TI1_SetConfig+0x5a>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <TIM_TI1_SetConfig+0x5c>
 8003326:	2300      	movs	r3, #0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f023 0303 	bic.w	r3, r3, #3
 8003332:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	e003      	b.n	8003346 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f043 0301 	orr.w	r3, r3, #1
 8003344:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800334c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	b2db      	uxtb	r3, r3
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	4313      	orrs	r3, r2
 8003358:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f023 030a 	bic.w	r3, r3, #10
 8003360:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f003 030a 	and.w	r3, r3, #10
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	621a      	str	r2, [r3, #32]
}
 800337a:	bf00      	nop
 800337c:	371c      	adds	r7, #28
 800337e:	46bd      	mov	sp, r7
 8003380:	bc80      	pop	{r7}
 8003382:	4770      	bx	lr
 8003384:	40012c00 	.word	0x40012c00
 8003388:	40013400 	.word	0x40013400
 800338c:	40000400 	.word	0x40000400
 8003390:	40000800 	.word	0x40000800
 8003394:	40000c00 	.word	0x40000c00

08003398 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	f023 0201 	bic.w	r2, r3, #1
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f023 030a 	bic.w	r3, r3, #10
 80033d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4313      	orrs	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	621a      	str	r2, [r3, #32]
}
 80033ea:	bf00      	nop
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr

080033f4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
 8003400:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f023 0210 	bic.w	r2, r3, #16
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003420:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	021b      	lsls	r3, r3, #8
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003432:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	031b      	lsls	r3, r3, #12
 8003438:	b29b      	uxth	r3, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003446:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	4313      	orrs	r3, r2
 8003454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	621a      	str	r2, [r3, #32]
}
 8003462:	bf00      	nop
 8003464:	371c      	adds	r7, #28
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	f023 0210 	bic.w	r2, r3, #16
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	031b      	lsls	r3, r3, #12
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	621a      	str	r2, [r3, #32]
}
 80034c0:	bf00      	nop
 80034c2:	371c      	adds	r7, #28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr

080034ca <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b087      	sub	sp, #28
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f023 0303 	bic.w	r3, r3, #3
 80034f6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003506:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	b2db      	uxtb	r3, r3
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4313      	orrs	r3, r2
 8003512:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800351a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	021b      	lsls	r3, r3, #8
 8003520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	4313      	orrs	r3, r2
 8003528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	621a      	str	r2, [r3, #32]
}
 8003536:	bf00      	nop
 8003538:	371c      	adds	r7, #28
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800356c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	021b      	lsls	r3, r3, #8
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800357e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	031b      	lsls	r3, r3, #12
 8003584:	b29b      	uxth	r3, r3
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003592:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	031b      	lsls	r3, r3, #12
 8003598:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	621a      	str	r2, [r3, #32]
}
 80035ae:	bf00      	nop
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr

080035b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f043 0307 	orr.w	r3, r3, #7
 80035da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	609a      	str	r2, [r3, #8]
}
 80035e2:	bf00      	nop
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr

080035ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003606:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	021a      	lsls	r2, r3, #8
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	431a      	orrs	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4313      	orrs	r3, r2
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	609a      	str	r2, [r3, #8]
}
 8003620:	bf00      	nop
 8003622:	371c      	adds	r7, #28
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr

0800362a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800362a:	b480      	push	{r7}
 800362c:	b087      	sub	sp, #28
 800362e:	af00      	add	r7, sp, #0
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	f003 031f 	and.w	r3, r3, #31
 800363c:	2201      	movs	r2, #1
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a1a      	ldr	r2, [r3, #32]
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	43db      	mvns	r3, r3
 800364c:	401a      	ands	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a1a      	ldr	r2, [r3, #32]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	fa01 f303 	lsl.w	r3, r1, r3
 8003662:	431a      	orrs	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	621a      	str	r2, [r3, #32]
}
 8003668:	bf00      	nop
 800366a:	371c      	adds	r7, #28
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr
	...

08003674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003688:	2302      	movs	r3, #2
 800368a:	e050      	b.n	800372e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a1b      	ldr	r2, [pc, #108]	; (8003738 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d018      	beq.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a19      	ldr	r2, [pc, #100]	; (800373c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d013      	beq.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e2:	d00e      	beq.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a15      	ldr	r2, [pc, #84]	; (8003740 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d009      	beq.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a14      	ldr	r2, [pc, #80]	; (8003744 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d004      	beq.n	8003702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a12      	ldr	r2, [pc, #72]	; (8003748 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d10c      	bne.n	800371c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003708:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	4313      	orrs	r3, r2
 8003712:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr
 8003738:	40012c00 	.word	0x40012c00
 800373c:	40013400 	.word	0x40013400
 8003740:	40000400 	.word	0x40000400
 8003744:	40000800 	.word	0x40000800
 8003748:	40000c00 	.word	0x40000c00

0800374c <memset>:
 800374c:	4603      	mov	r3, r0
 800374e:	4402      	add	r2, r0
 8003750:	4293      	cmp	r3, r2
 8003752:	d100      	bne.n	8003756 <memset+0xa>
 8003754:	4770      	bx	lr
 8003756:	f803 1b01 	strb.w	r1, [r3], #1
 800375a:	e7f9      	b.n	8003750 <memset+0x4>

0800375c <__libc_init_array>:
 800375c:	b570      	push	{r4, r5, r6, lr}
 800375e:	2600      	movs	r6, #0
 8003760:	4d0c      	ldr	r5, [pc, #48]	; (8003794 <__libc_init_array+0x38>)
 8003762:	4c0d      	ldr	r4, [pc, #52]	; (8003798 <__libc_init_array+0x3c>)
 8003764:	1b64      	subs	r4, r4, r5
 8003766:	10a4      	asrs	r4, r4, #2
 8003768:	42a6      	cmp	r6, r4
 800376a:	d109      	bne.n	8003780 <__libc_init_array+0x24>
 800376c:	f000 f81a 	bl	80037a4 <_init>
 8003770:	2600      	movs	r6, #0
 8003772:	4d0a      	ldr	r5, [pc, #40]	; (800379c <__libc_init_array+0x40>)
 8003774:	4c0a      	ldr	r4, [pc, #40]	; (80037a0 <__libc_init_array+0x44>)
 8003776:	1b64      	subs	r4, r4, r5
 8003778:	10a4      	asrs	r4, r4, #2
 800377a:	42a6      	cmp	r6, r4
 800377c:	d105      	bne.n	800378a <__libc_init_array+0x2e>
 800377e:	bd70      	pop	{r4, r5, r6, pc}
 8003780:	f855 3b04 	ldr.w	r3, [r5], #4
 8003784:	4798      	blx	r3
 8003786:	3601      	adds	r6, #1
 8003788:	e7ee      	b.n	8003768 <__libc_init_array+0xc>
 800378a:	f855 3b04 	ldr.w	r3, [r5], #4
 800378e:	4798      	blx	r3
 8003790:	3601      	adds	r6, #1
 8003792:	e7f2      	b.n	800377a <__libc_init_array+0x1e>
 8003794:	08003df4 	.word	0x08003df4
 8003798:	08003df4 	.word	0x08003df4
 800379c:	08003df4 	.word	0x08003df4
 80037a0:	08003df8 	.word	0x08003df8

080037a4 <_init>:
 80037a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a6:	bf00      	nop
 80037a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037aa:	bc08      	pop	{r3}
 80037ac:	469e      	mov	lr, r3
 80037ae:	4770      	bx	lr

080037b0 <_fini>:
 80037b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b2:	bf00      	nop
 80037b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b6:	bc08      	pop	{r3}
 80037b8:	469e      	mov	lr, r3
 80037ba:	4770      	bx	lr
